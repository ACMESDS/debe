Ext.data.JsonP.ENUM({"tagname":"class","name":"ENUM","autodetected":{},"files":[{"filename":"enum.md","href":"enum.md.html#ENUM"}],"members":[{"name":"copy","tagname":"method","owner":"ENUM","id":"method-copy","meta":{}},{"name":"each","tagname":"method","owner":"ENUM","id":"method-each","meta":{}},{"name":"extend","tagname":"method","owner":"ENUM","id":"method-extend","meta":{}},{"name":"flush","tagname":"method","owner":"ENUM","id":"method-flush","meta":{"private":true}},{"name":"test","tagname":"method","owner":"ENUM","id":"method-test","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-ENUM","short_doc":"SourceForge\n    github\n    geointapps\n    gitlab\n\nENUM\n\nENUM provides a a common core of enumerators:\n\ntest(opts,cb) ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/enum.md.html#ENUM' target='_blank'>enum.md</a></div></pre><div class='doc-contents'><p><a href=\"https://sourceforge.net\">SourceForge</a>\n    <a href=\"https://github.com/acmesds/enum.git\">github</a>\n    <a href=\"https://git.geointapps.org/acmesds/enum\">geointapps</a>\n    <a href=\"https://gitlab.weat.nga.ic.gov/acmesds/enum.git\">gitlab</a></p>\n\n<h1>ENUM</h1>\n\n<p>ENUM provides a a common core of enumerators:</p>\n\n<pre><code>test(opts,cb)               // unit-tests a client by calling opts[ opts.N ] \ncopy(src,tar,deep,cb)  // shallow/deep copy src to tar\neach(opts,cb)               // calls cb( n, opts[n] )\nextend(opts)                // adds opts to the enumerator\nextend(src,methods)     // extends src constructor with methods\nflush()                         // calls all opts having a Function-key\n</code></pre>\n\n<p>where:</p>\n\n<ul>\n<li><p>copy() will copy the source src to a target tar under supervision of an optional callback\ncb(value) returning true to drop.  If a deep key deliminator (e.g. \".\") is\nspecified, the copy is deep where src keys are treated as keys into the target thusly:</p>\n\n<p>  {\n      A: value,           // sets target[A] = value</p>\n\n<pre><code>  \"A.B.C\": value,     // sets target[A][B][C] = value\n\n  \"A.B.C.\": {         // appends X,Y to target[A][B][C]\n      X:value, Y:value, ...\n  },  \n\n  OBJECT: [           // prototype OBJECT (Array,String,Date,Object) = method X,Y, ...\n      function X() {}, \n      function Y() {}, \n  ... ],\n\n  Function:           // append method X to ENUM callback stack\n      function X() {}\n</code></pre>\n\n<p>  }</p></li>\n<li><p>clone() will shallow copy the src source hash under supervision of a copy() callback.</p></li>\n<li><p>each() will shallow enumerate over its opts with callback cb(key,value).</p></li>\n<li><p>extend() will extend the opts prototype with specified methods, or, if no methods are provided,\nextend this ENUM with the given opts.  Array, String, Date, and Object keys are\ninterpretted to extend their respective prototypes.  A Function key is interpretted\nto push the function to the ENUM callStack (which can be drained by the ENUM flush\nmethod).</p></li>\n<li><p>test() will unit-test a module as documented in its config.js.</p></li>\n</ul>\n\n\n<h2>Installation</h2>\n\n<p>Clone from one of the repos.</p>\n\n<h2>Use</h2>\n\n<p>From, say, asm.js</p>\n\n<pre><code>var\n    ENUM = require(\"enum\"),\n    Copy = <a href=\"#!/api/ENUM-method-copy\" rel=\"ENUM-method-copy\" class=\"docClass\">ENUM.copy</a>,\n    Clone = ENUM.close,\n    Each = <a href=\"#!/api/ENUM-method-each\" rel=\"ENUM-method-each\" class=\"docClass\">ENUM.each</a>,\n    ASM = module.exports = <a href=\"#!/api/ENUM-method-extend\" rel=\"ENUM-method-extend\" class=\"docClass\">ENUM.extend</a>({  // see <a href=\"#!/api/ENUM-method-copy\" rel=\"ENUM-method-copy\" class=\"docClass\">ENUM.copy</a> for key syntax\n        key: value,\n        key: value,\n        :\n        :\n    });\n</code></pre>\n\n<p>then extended again from, say, nextasm.js</p>\n\n<pre><code>var \n    ASM = require(\"asm\"),\n    NEXTASM = module.exports = ASM.extend({\n        key: value,\n        :\n        :\n    });\n</code></pre>\n\n<h2>License</h2>\n\n<p><a href=\"LICENSE\">MIT</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-copy' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ENUM'>ENUM</span><br/><a href='source/enum.html#ENUM-method-copy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ENUM-method-copy' class='name expandable'>copy</a>( <span class='pre'>src, tar, deep, cb</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object<div class='sub-desc'><p>source hash</p>\n</div></li><li><span class='pre'>tar</span> : Object<div class='sub-desc'><p>target hash</p>\n</div></li><li><span class='pre'>deep</span> : String<div class='sub-desc'><p>copy key deliminator</p>\n</div></li><li><span class='pre'>cb</span> : Function<div class='sub-desc'><p>callback(idx,val) returns true to drop</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>target hash</p>\n\n<p>Copy source hash to target hash under supervision of optional callback.\nIf a deep key deliminator (e.g. \".\") is specified, the copy is deep where src\nkeys are treated as keys into the target thusly:</p>\n\n<pre><code>    {   \n        A: value,           // sets target[A] = value\n\n        \"A.B.C\": value,     // sets target[A][B][C] = value\n\n        \"A.B.C.\": {         // appends X,Y to target[A][B][C]\n            X:value, Y:value, ...\n        },  \n\n        OBJECT: [           // prototype OBJECT (Array,String,Date,Object) = method X,Y, ...\n            function X() {}, \n            function Y() {}, \n        ... ],\n\n        Function:           // append method X to ENUM callback stack\n            function X() {}\n    }\n</code></pre>\n</div></li></ul></div></div></div><div id='method-each' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ENUM'>ENUM</span><br/><a href='source/enum.html#ENUM-method-each' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ENUM-method-each' class='name expandable'>each</a>( <span class='pre'>src, cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object<div class='sub-desc'><p>source hash</p>\n</div></li><li><span class='pre'>cb</span> : Function<div class='sub-desc'><p>callback (idx,val) returning true or false</p>\n\n<p>Enumerate over source until optional callback(key,val,isLast) returns isEmpty.  Returns isEmpty.</p>\n</div></li></ul></div></div></div><div id='method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ENUM'>ENUM</span><br/><a href='source/enum.html#ENUM-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ENUM-method-extend' class='name expandable'>extend</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Extend the opts prototype with specified methods, or, if no methods are provided,\nextend this ENUM with the given opts. ...</div><div class='long'><p>Extend the opts prototype with specified methods, or, if no methods are provided,\nextend this ENUM with the given opts.  Array, String, Date, and Object keys are\ninterpretted to extend their respective prototypes.  A Function key is interpretted\nto push the function to the ENUM callStack (which can be drained by the ENUM flush\nmethod).</p>\n</div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ENUM'>ENUM</span><br/><a href='source/enum.html#ENUM-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ENUM-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Flush the ENUM call stack defined by the extend() Function keys. ...</div><div class='long'><p>Flush the ENUM call stack defined by the extend() Function keys.</p>\n</div></div></div><div id='method-test' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ENUM'>ENUM</span><br/><a href='source/enum.html#ENUM-method-test' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ENUM-method-test' class='name expandable'>test</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unit-test a module as documented in its config.js. ...</div><div class='long'><p>Unit-test a module as documented in its config.js.</p>\n</div></div></div></div></div></div></div>","meta":{}});