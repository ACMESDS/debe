//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display d3 force graph:

			src = source url returning tree [ { name: "...", size: N, doc: "", nodes: [ {...}, ... ] }, ... ]
			pivots = key,key,...
			w = drawing width
			h = drawing height
			debug = debugging level
			name,nodes,value,size,parent,doc = tree key names

		Graph nodes are sized to node.weight + length(node[NODES]).

append base_head
	style.
		circle.node {
			cursor: pointer;
			stroke: #000;
			stroke-width: .5px;
		}
		line.link {
			fill: none;
			stroke: #9ecae1;
			stroke-width: 1.5px;
		}

	script.
		var opts = {
			ds: "#{query.pivots}"
				? "/!{query.src}.tree?name=#{query.name}&_sort=#{query.pivots}"
				: "#{query.name}"
							? "/!{query.src}.schema?name=#{query.name}"
							: "/!{query.src}",

			w: parseInt("#{query.w}") || 200,
			h: parseInt("#{query.h}") || 200,
			debug: parseInt("#{query.debug}"),
			NAME: "#{query.name}" || "name",
			NODES: "#{query.nodes}" || "nodes",
			VALUE: "#{query.value}" || "value",
			PARENT: "#{query.parent}" || "parent",
			SIZE: "#{query.size}" || "size",
			DOC: "#{query.doc}" || "doc",
			LINKS: "links"
		};

		const {NODE, NODES, VALUE, SIZE, PARENT, DOC, LINKS} = opts;
		const {isString,Load} = BASE;

append base_body

	script.
		var width = 800;
		var height = 600;
		var color = d3.scaleOrdinal(d3.schemeCategory10);

		//d3.json("miserables.json").then(function(graph) {
		Load( opts, recs => {
			data = recs[0] || {};
			data.links = [];
			//root.fixed = true;
			//root.x = width / 2;
			//root.y = height / 2;
			//update();

			function chart(data) {
			  const links = data.links.map(d => Object.create(d));
			  const nodes = data.nodes.map(d => Object.create(d));

			  const simulation = d3.forceSimulation(nodes)
				  .force("link", d3.forceLink(links).id(d => d.id))
				  .force("charge", d3.forceManyBody())
				  .force("center", d3.forceCenter(width / 2, height / 2));

			  const svg = d3.create("svg")
				  .attr("viewBox", [0, 0, width, height]);

			  const link = svg.append("g")
				  .attr("stroke", "#999")
				  .attr("stroke-opacity", 0.6)
				.selectAll("line")
				.data(links)
				.join("line")
				  .attr("stroke-width", d => Math.sqrt(d.value));

			  const node = svg.append("g")
				  .attr("stroke", "#fff")
				  .attr("stroke-width", 1.5)
				.selectAll("circle")
				.data(nodes)
				.join("circle")
				  .attr("r", 5)
				  .attr("fill", color)
				  .call(drag(simulation));

			  node.append("title")
				  .text(d => d.id);

			  simulation.on("tick", () => {
				link
					.attr("x1", d => d.source.x)
					.attr("y1", d => d.source.y)
					.attr("x2", d => d.target.x)
					.attr("y2", d => d.target.y);

				node
					.attr("cx", d => d.x)
					.attr("cy", d => d.y);
			  });

			  invalidation.then(() => simulation.stop());

			  return svg.node();
			}
		});

//- UNCLASSIFIED