//- UNCLASSIFIED
//-
	Provides a foundational layout framework with parameters:

		banner = "site banner"
		start = "div name" to place content
		math = false | true to enable mathjax plugin 
		highlight = "zenburn | ..." code styling theme 
		capture = false | true to add screen capture button
		&inline = "/file.type &w=width &h=height" to embed a file with derived attributes

block layout_parms
	- banner = ""
	- start = ""
	- highlight = "zenburn"
	- capture = false
	- math = true

html(lang="en")

	head

		meta(http-equiv="Content-Type",content="text/html; charset=utf-8;")

		//- Tell IE to use the latest, best version (or Chrome Frame if pre-IE11).
		meta(http-equiv="X-UA-Compatible", content="IE=Edge,chrome=1")
		
		//- Make the application on mobile take up the full browser screen and disable user scaling.
		meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no")

		title #{nick}-#{table}

		//-	Check browser compatibility. Requires javascript and JSON. Invalid browsers will crash or ignore startup scripts.

		noscript
			p Please enable Javascript and Cookies to access #{title}.

		if (!JSON.parse)
			script(src="/clients/json/json2.js")

		script.
			var probe = {platform: true, location: false, ip: true, browser: true};

			var totem = navigator.totem = {
				browser: null, 
				ip: null, 
				location: null,
				onLinux: false,
				onWindows: false
			};

			if (probe.browser) {  // Discover clients brower
				var
					agent = navigator.userAgent || "",
					agents = {Firefox:"Firefox/", Chrome: "Chrome/", Safari:"Safari/"};
						
				for (var n in agents)
					if (agent.indexOf(agents[n])>=0) {
						totem.browser = n;
						break;
					}
			}

			if (probe.platform) { // Doscover clients platform
				totem.onLinux = navigator.platform.indexOf("Linux") == 0;
				totem.onWindows = navigator.platform.indexOf("Win") == 0;
			}
			
			// Discover client IP addresses associated with an account
			function getIPs(callback){
				var ip_dups = {};

				//compatibility for firefox and chrome
				var RTCPeerConnection = window.RTCPeerConnection
					|| window.mozRTCPeerConnection
					|| window.webkitRTCPeerConnection;
				var useWebKit = !!window.webkitRTCPeerConnection;

				//bypass naive webrtc blocking using an iframe
				if(!RTCPeerConnection){
					//NOTE: you need to have an iframe in the page right above the script tag
					//
					//<iframe id="iframe" sandbox="allow-same-origin" style="display: none"></iframe>
					//<script>...getIPs called in here...
					//
					var win = iframe.contentWindow;
					RTCPeerConnection = win.RTCPeerConnection
						|| win.mozRTCPeerConnection
						|| win.webkitRTCPeerConnection;
					useWebKit = !!win.webkitRTCPeerConnection;
				}

				//minimal requirements for data connection
				var mediaConstraints = {
					optional: [{RtpDataChannels: true}]
				};

				var servers = {iceServers: [{urls: "stun:stun.services.mozilla.com"}]};

				//construct a new RTCPeerConnection
				var pc = new RTCPeerConnection(servers, mediaConstraints);

				function handleCandidate(candidate){
					//match just the IP address
					var ip_regex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/
					var ip_addr = ip_regex.exec(candidate)[1];

					//remove duplicates
					if(ip_dups[ip_addr] === undefined) callback(ip_addr);

					ip_dups[ip_addr] = true;
				}

				//listen for candidate events
				pc.onicecandidate = function(ice){ //skip non-candidate events
					if(ice.candidate) handleCandidate(ice.candidate.candidate);
				};

				//create a bogus data channel
				pc.createDataChannel("");

				//create an offer sdp
				pc.createOffer(function(result){ 
					//trigger the stun server request
					pc.setLocalDescription(result, function(){}, function(){});

				}, function(){});

				//wait for a while to let everything done
				setTimeout( function() {
					//read candidate info from local description
					var lines = pc.localDescription.sdp.split('\n');

					lines.forEach(function(line) {
						if(line.indexOf('a=candidate:') === 0) handleCandidate(line);
					});
				}, 1000);
			}

			if (probe.ip)  // Retain IP addresses
				getIPs(function(ip){
					totem.ip = ip;
				});
			
			if (navigator.geolocation && probe.location)  // Discover client geolocation
				navigator.geolocation.getCurrentPosition(function (pos) {
					if (!pos.coords) pos.coords = {latitude:0, longitude: 0};
					totem.location = 'POINT(' + pos.coords.latitude + " " + pos.coords.longitude + ')';
				}, function (err) {	
					totem.location = 'POINT(0 0)';
				});

		//-
			Install socketio to sync changes amoungst clients.  This interface is establihed 
			when the server does a require('socket.io') which creates a route #{sockets} = 
			"/socket.io/socket.io.js" on which the client can source -- via a <script 
			src="/socket.io/socket.io.js"> tag -- its io method.  

		if socketio
			script(src=socketio)
		else
			script.
				var io = null;

		//- Define code highlighter if needed

		if highlight
			link(rel='stylesheet',href='/clients/reveal/lib/css/#{highlight}.css')

			style.
				code  {
					font-family: consolas, courier, monospace;
					font-size: 1em;
					line-height: 1.2em;
					white-space: pre;
					background-color: #acf; /* any colour's okay */
					color: #000; /* likewise */
					border: 1px solid #666;
					-moz-border-radius: 0.5em;
					-webkit-border-radius: 0.5em;
					border-radius: 0.5em; /* just in case */
					padding: 25px;
					margin: 1.2em 1em;
					width: 100%;
					float: left;
				}

		//- Load mathjax preprocessor if needed

		if math
			script(src="/clients/mathjax/MathJax.js?config=default")

		//- The capture plugin allows clients to capture their web canvas.

		if capture
			script(src="/clients/html2canvas/dist/html2canvas.min.js")
			script(src="/clients/screen2canvas/capture.js")
		else
			script.
				var 
					html2canvas = null;

		if math
			script.
				MathJax.Hub.Config({
					extensions: ["tex2jax.js"],
					jax: ["input/TeX","output/HTML-CSS"],
					tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
				});
				//MathJax.Hub.Queue(["Paper",MathJax.Hub]);

		block layout_head

	body

		//- Inject content div
		#content(icons=icons,start=start,client=client,source=table,query=JSON.stringify(query),title=banner)

			if query.inline
				inline(src=query.inline,w="90%",h="90%",a="Classif",g="Edit",s="rd")
				//
					script(src="/clients/uis/base.js")
					script.
						BASE.start();

			block layout_body
			
//- UNCLASSIFIED
