//- UNCLASSIFIED
//-
	Extends the layout framework to provide a base framework with parameters:

		tech = "[extjs] | jquery | dojo | reveal | voxel | scene | three | cesium | joint | d3 | flow | ..."
		locale = "[en] | fr | de | ..." language plugin 
		holdoff = "button name" to holdoff loading via button
		holdoff = "skin,skin, ..." skins to holding loading via accordion
		start = "starting div" to place content
		
		extjs:
			carousel = false | true image plugin
			theme = "crisp | neptune | aria | gray | ..." styling
			charting = true | false data visualization plugin

		reveal:
			theme = "default | ..." styling  
			classif = "classification banner"
		
		jquery:
			grid = "DataTable | w2UI | jqgrid | ... " gridding technology
			image = "Darkroom | Camen | Vide | Fabric | ... " image technology
			pivot = "Isotope | elFinder | apy-X | ... " pivot technology
			themer = false | true
			password = false | true
		
		voxel:
			game = "cubeland | ... "

		three:
			effect = "AnaglyphEffect | ... "

		cesium:
			src = query.src
			src = "dataset | ..." 
			host = "aws | geohub | me | win | local | local | swaggpu | swagaws | swagdev | ..."
			width = 750
			height = 500
			
		d3:
			map = "world | usa | ... "
		
		flow:
			none

extends layout
append layout_parms
	- start = start
append layout_head

	block base_parms
		- start = ""
		- tech = "extjs"
		- base = true
		- locale = query.locale || "en"
		- holdoff = query.holdoff
		- banner = query.holdoff ? "" : banner
		- theme = query.theme
		- hosts = {geohub: "https://sigma0.ilabs.ic.gov:8083", me: "localhost:8083", win: "http://200.100.50.101:8083", aws: "http://172.31.76.130:8083",local:"http://localhost:8083",swaggpu:"http://swag-gpu-01.ec2.internal:8083", swagws:"http://swag-ws-02.ec2.internal:8083", swagdev: "http://localhost:8083"}
		// extjs
		- carousel = false
		- charting = false
		// jquery
		- grid = "DataTable"
		- image = "Darkroom"
		- pivot = "Isotope"
		- themer = false
		- password = false
		// reveal
		- highlight = "zenburn"
		- more = {}
		- help = "can I get some help here?"
		- classif = "UNCLASSIFIED"
		// voxel
		- game = "cubeland"
		// three
		- effect = ""
		// cesium
		- src = query.src
		- host = "swagdev"
		- width = 750
		- height = 500		
		// d3
		- map = ""
		// flow

	//- Define tech styles

	case tech
		when "three"
			include base_three
		
		when "reveal"
			include base_reveal

		when "scene"
			include base_scene

		when "dojo"
			include base_dojo

		when "jquery"
			include base_jquery

		when "extjs"
			include base_extjs
			
		when "flow"
			include base_flow

	//- Load underlying tech 
	case tech
		when "flow"
			//- any changes in these scriptes require re-minification
			script(src="/clients/joint/joint.min.js")
			script(src="/clients/joint/joint.shapes.devs.js")
			script(src="/clients/joint/joint.shapes.fsa.min.js")
			script(src="/clients/joint/joint.shapes.pn.min.js")
			script(src="/clients/joint/joint.shapes.erd.min.js")
			//-script(src='/clients/jQuery/js/jquery-1.9.1.min.js')
			script(src='/clients/jQuery/ui/jquery-ui-1.10.3.custom.min.js')
			//-script(src='/clients/jQuery/plugins/misc/jquery.ui.tooltip.min.js')
		
		when "d3"
			script(src="/clients/d3/d3.min.js")
			case map
				when "world"
					script(src="/clients/maps/topojson.min.js")
					script(src="/clients/maps/datamaps.world.min.js")

				when "usa"
					script(src="/clients/maps/topojson.min.js")
					script(src="/clients/maps/datamaps.usa.min.js")

		when "three"
			script(src="/clients/threejs/build/three.min.js")
			script(src="/clients/threejs/examples/js/Detector.js")
			script(src="/clients/threejs/examples/js/libs/stats.min.js")
		
		when "reveal"
			script(src='/clients/reveal/plugin/highlight/highlight.js')
			script(src='/clients/reveal/lib/js/head.min.js')
			script(src='/clients/reveal/js/reveal.min.js')

		when "scene"
			script(src="/clients/scenejs/scenejs.js")
			script.
				SceneJS.setConfigs({
					pluginPath:"clients/scenejs/plugins"
				});

		when "dojo"
			script.
				var dojoConfig = {
						async: true,
						baseUrl: "/clients/dojo/",
						packages: [
							//{ name: "dojo" 	},
							//{ name: "dijit"  },
							//{ name: "dojox"  }
						]
					};
			script(src="/clients/dojo/dojo/dojo.js")

		when "jquery"
			script(src='/clients/jquery/js/jquery-1.11.0.min.js')

			if themer
				script(src='/clients/jquery/plugins/misc/themeswitchertool.js')

			case grid
				when "w2UI"
					script(src='/clients/w2ui/dist/w2ui.min.js')

				when "DataTable"
					script(src="/clients/datatables/media/js/jquery.dataTables.js")

				when "jqgrid"
					script(src="/clients/jqgrid/js/i18n/grid.locale-en.js")
					script(src="/clients/jqgrid/js/minified/jquery.jqgrid.min.js")

			script.
				var 
					fabric = null,
					Darkroom = null,
					elFinder = null,
					Caman = null;

			case image
				when "Vide"
					script(src="/clients/vide/src/jquery.vide.js")

				when "Fabric"
					script(src="/clients/fabric.js/dist/fabric.min.js")

				when "Caman"
					script(src="/clients/caman/dist/caman.full.min.js")

				when "Darkroom"
					//- "npm start" from jquery/plugins/darkroom to recompile lib/icons and lib/js
					link(href="/clients/darkroom/build/darkroom.css",rel='stylesheet')
					script(src="/clients/fabricjs/dist/fabric.min.js")
					script(src="/clients/darkroom/build/darkroom.js")
					script(src="/clients/darkroom/lib/js/plugins/darkroom.brightness.js")
					script(src="/clients/darkroom/lib/js/plugins/darkroom.grayscale.js")
					script(src="/clients/darkroom/lib/js/plugins/darkroom.invert.js")
					script(src="/clients/darkroom/lib/js/plugins/darkroom.remove.js")
					script(src="/clients/darkroom/lib/js/plugins/darkroom_help.js")

			case pivot
				when "elFinder"
					script(src="/clients/elfinder/js/elfinder.full.js")
					script.
						$("").elFinder = true;

					//- uncomment to debug elFinder
						link(href='/clients/jquery/ui/css/smoothness/jquery-ui.css',rel='stylesheet')
						script(src='/clients/jquery/js/jquery-1.8.0.min.js')
						script(src='/clients/jquery/ui/jquery-ui-1.8.23.custom.min.js')

				when "Isotope"
					script(src="/clients/isotope.pkgd.min.js")
					script(src="/clients/imagesloaded.pkgd.min.js")
					script(src="/clients/packery-mode.pkgd.min.js")

				default
					// nothing
						script(src="/clients/apy/#{idx}/jquery.js")
						script(src="/clients/apy/#{idx}/menu.js")
						a(href="http://-apycom.com/")

			script(src='/clients/jquery/ui/jquery-ui-1.10.3.custom.min.js')

		when "extjs"
			if carousel  /* unsupported in ExtJS 5.x */
				//- script(src="/clients/extjs/ext-core.js")
				script(src="/clients/extjs/plugins/carousel.js")
				script.
					Ext.onReady( function () {
						new Ext.ux.carousel('content', {
							itemSelector: 'img',
							interval: 4,
							autoPlay: true,
							showPlayButton: true,
							transitionDuration: 2,
							width: 600,
							height: 400,
							pauseOnNavigate: true,
							freezeOnHover: false,
							transitionType: 'fade',
							navigationOnHover: true
						});
					});
			else
				script(src="/clients/extjs/build/ext-all.js")

			if charting
				script(src="/clients/extjs/build/packages/sencha-charts/build/sencha-charts.js")

			script.
				Ext.Loader.setConfig({
					enabled: true, 
					paths: {
						'Ext.ux': '/clients/extjs/plugins',
						'Ext': '/clients/extjs/build/examples'
				}});

			//
				script.
				Ext.Loader.loadScript({
					//url: "/clients/extjs/packages/ext-locale/build/ext-locale-#{locale}.js",
					//onLoad: function () { alert("Language loaded"); },
					onError: function () { alert("Locale failed to load"); },
					scope: this
				});

	//- Load the base and tech-specific dom parser

	if base
		script(src="/clients/uis/base.js")
		script(src="/clients/uis/#{tech}.js")

	block base_head

append layout_body

	if holdoff
		- holds = holdoff.split(",")
		
		if holds.length > 1
			#accordion.Load
				each hold in holds
					#post(class=hold,path="/"+hold+".view",refresh,dims="98%,98%")

		else
			#post(class=holdoff,path=url.replace('holdoff='+holdoff, ''),refresh,dims="98%,98%")
	else
		case tech
			when "nada"
				block base_body

			when "flow"
				block base_body
					table
						th: input#run.ui-icon-run(type="button",size=4,title="step or pause simulation")
						th: input#open.ui-icon-open(type="button",size=4,title="open selected system")
						th: input#save.ui-icon-save(type="button",size=4,title="save model")
						th: input#load.ui-icon-load(type="button",size=4,title="load model")
						th: input#clone.ui-icon-clone(type="button",size=4,title="clone selected system")
						th: input#delete.ui-icon-delete(type="button",size=4,title="delete selected system")
						th: input#select.ui-icon-select(type="button",size=4,title="select system")
						th: input#info.ui-icon-info(type="button",size=4,title="info about selected system")
						th: input#reset.ui-icon-reset(type="button",size=4,title="stop and reset simulation")
						th.x: #status status
						th.x: #state state
						th.x: #step step
						th.x: #tokens tokens
						th.x: #jobs jobs
						th.x: #msg msg
						th.x: #db LFS
						th: #progressBar
							#res

					//- for debugging wrapper
						svg#Experimental(xmlns="http://-www.w3.org/2000/svg",version="1.1",style="width:150px;height:150px;position:absolute;")
							ellipse(cx="50%",cy="50%",rx="50%",ry="50%",stroke="#FF0000",stroke-width="2",fill="#800000")
							ellipse(cx="50%",cy="50%",rx="10%",ry="10%",stroke="#FF0000",stroke-width="2",fill="#880000")

			when "cesium"
				iframe(src="#{hosts[host]}/geonode/cesium.html?src=#{src}",width="#{width}",height="#{height}")

			when "three"
				block base_body
				if effect
					script(src="/clients/threejs/examples/js/effects/#{effect}.js")

			when "dojo"
				block base_body

			when "scene"
				block base_body
				script.
					SceneJS.setConfigs({
						pluginPath:"clients/scenejs/plugins"
					});

			when "voxel"
				#container
					#crosshair
					#battery
					nav#tools.bar-tab
						ul.tab-inner
							li(class="tab-item active")
								.tab-label
									| grass
							li.tab-item
								.tab-label
									| dirt
							li.tab-item
								.tab-label
									| obsidian
							li.tab-item
								.tab-label
									| plank
							li.tab-item
								.tab-label
									| dude

					block base_body

				script(src="/clients/games/#{game}/bundle.js")

			when "reveal"
				.reveal(style="width:100%;height:100%;")
					// .progress // .control // .state-background // .pause-overlay
					.slides
						block base_body

				script.
					Reveal.initialize({
						keyboard: {
							116: function () { alert("tada!"); }
						},

						// Display controls in the bottom right corner
						controls: true,

						// Display a presentation progress bar
						progress: true,

						// If true; each slide will be pushed to the browser history
						history: true,

						// Loops the presentation, defaults to false
						loop: false,

						// Slide numbers
						slideNumber: "c/t",

						// Flags if mouse wheel navigation should be enabled
						mouseWheel: true,

						// Apply a 3D roll to links on hover
						rollingLinks: true,

						// UI style
						theme:  Reveal.getQueryHash().theme, //'default', // available themes are in /css/theme

						// Transition style
						transition:  Reveal.getQueryHash().transition || 'default', //'default', // default/cube/page/concave/zoom/linear/none

						// For MathJax suuport

						math: {
							mathjax: '/clients/mathjax/MathJax.js',
							config: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html
						},

						//	Optional libraries used to extend on reveal.js

						dependencies: [
							{ src: '/clients/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },
							{ src: '/clients/reveal/plugin/math/math.js', async: true },
							{ src: '/clients/reveal/plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
							{ src: '/clients/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
							//{ src: '/clients/reveal/plugin/highlight/highlight.js', async: false, callback: function() { hljs.initHighlightingOnLoad(); } },
							{ src: '/clients/reveal/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
							{ src: '/clients/reveal/plugin/zoom-js/zoom.js', async: true, condition: function() { return true; } },
							{ src: '/clients/reveal/plugin/notes/notes.js', async: true, condition: function() { return true; } }
						]
					});

					// Fires when a slide with data-state=customevent is activated
					Reveal.addEventListener( 'customevent', function() {
						alert( '"custom event" has fired' );
					} );

					// Fires each time a new slide is activated
					Reveal.addEventListener( 'slidechanged', function( event ) {
						// event.indexh & event.indexv
					} );

					// Fires when frame is shown or hidden						
					Reveal.addEventListener( 'fragmentshown', function( event ) {
						// event.fragment = the fragment DOM element
					} );

					Reveal.addEventListener( 'fragmenthidden', function( event ) {
						// event.fragment = the fragment DOM element
					} );

			default
				block base_body

//- UNCLASSIFIED
