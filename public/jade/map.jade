//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display tree-map chart using parameters:

			src = source url returning tree [ { node: "...", size: N, doc: "", nodes: [ {...}, ... ] }, ... ]
			name = "name" || "name%..." || "" of source record(s)
			pivots = "key,key,..." || "" source record grouping keys
			w = drawing width
			h = drawing height
			debug = level of debugging alerts
			node,nodes,value,size,parent,doc = tree keys

append base_head

	style.
		body {
		  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
		  margin: auto;
		  position: relative;
		  width: 960px;
		}

		form {
		  position: absolute;
		  right: 10px;
		  top: 10px;
		}

		.node {
		  border: solid 1px white;
		  font: 10px sans-serif;
		  line-height: 12px;
		  overflow: hidden;
		  position: absolute;
		  text-indent: 2px;
		}

	script.
		var opts = {
			ds: "#{query.pivots}"
				? "/!{query.src}.tree?name=#{query[NAME]}&_sort=#{query.pivots}"
				: "#{query[NAME]}"
							? "/!{query.src}.schema?name=#{query[NAME]}"
							: "/!{query.src}",

			w: parseInt("#{query.w}") || 200,
			h: parseInt("#{query.h}") || 200,
			debug: parseInt("#{query.debug}"),
			NODE: "#{query.node}" || "name",
			NODES: "#{query.nodes}" || "nodes",
			VALUE: "#{query.value}" || "value",
			PARENT: "#{query.parent}" || "parent",
			SIZE: "#{query.size}" || "size",
			DOC: "#{query.doc}" || "doc"
		};
		
		const {NODE, NODES, VALUE, SIZE, PARENT, DOC} = opts;
		const {isString,Load} = BASE;

append base_body

	script.
		var
			margin = {top: 40, right: 10, bottom: 10, left: 10},
			width = (opts.w || 1200) - margin.left - margin.right,
			height = (opts.h || 500) - margin.top - margin.bottom,

			color = d3.scaleOrdinal(d3.schemeCategory10),
			format = d3.format(",d"),
											 
			view = d3.select("body"),
			msg = "p".d3tag(view, {text: "details: "}),
			url = "#{url}".replace("/treemap",""),
			title = "p".d3tag(view,	{ html: [
						"treefan".tag( "/treefan"+url ),
						"force".tag( "/force"+url )
					].join(" || ")
				} ),
					
			treemap = d3.treemap()
					.tile(d3.treemapSquarify)
					.size([width, height])
					.padding(1)
					.round(true);

			function chart(data) {
			  const root = d3.hierarchy(data)
					.sum(d => d.value)
					.sort((a, b) => b.value - a.value);

			  const svg = d3.create("svg")
				  .attr("viewBox", [0, 0, width, height])
				  .style("font", "10px sans-serif");

			 console.log("leaves",root.leaves());
				
			  const leaf = svg.selectAll("g")
				.data(root.leaves())
				.join("g")
				  .attr("transform", d => `translate(${d.x0},${d.y0})`);

			  leaf.append("title")
				  .text(d => `${d.ancestors().reverse().map(d => d.data.name).join("/")}\n${format(d.value)}`);

			  leaf.append("rect")
				  //.attr("id", d => (d.leafUid = DOM.uid("leaf")).id)
				  .attr("fill", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })
				  .attr("fill-opacity", 0.6)
				  .attr("width", d => d.x1 - d.x0)
				  .attr("height", d => d.y1 - d.y0);

			  leaf.append("clipPath")
				//.attr("id", d => (d.clipUid = DOM.uid("clip")).id)
				.append("use")
				//.attr("xlink:href", d => d.leafUid.href);

			  leaf.append("text")
				//.attr("clip-path", d => d.clipUid)
				.selectAll("tspan")
				.data(d => d.data.name.split(/(?=[A-Z][^A-Z])/g).concat(format(d.value)))
				.join("tspan")
				.attr("x", 3)
				.attr("y", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)
				.attr("fill-opacity", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)
				.text(d => d);

			  return svg.node();
			}

			Load( opts, data => chart(data) );
		
// UNCLASSIFIED
		
