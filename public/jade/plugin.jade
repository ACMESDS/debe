// UNCLASSIFIED
extends base
append base_help
	:markdown
		Render a DEBE notebook where:

			mode = notebook type = brief | gridbrief | runbrief | pivbrief | run | notebook | view | pivot
			ds = "/DATASET" dataset source
			client = client viewing this notebook
			cols = dataset files/columns/keys = "key.type.label, ..."

append base_parms
	case query.mode
		when "brief"
		when "gridbrief"
		when "runbrief"
		when "pivbrief"
			- tech = "reveal"
		default
			- tech = "extjs"

extends site
append site_parms
	case query.mode
		when "note"
		when "notebook"
			- view = "Insert"
			- options = { "more+":"", "more++":"", less:"" }
		when "proj"
		when "run"
			- view = "Tabbed"
			- options = { "more+":"", "more++":"", less:"" }
		when "view"
		default
			- view = "Simple"

append site_body
	- mode = query.mode || ""
	- uses = query.uses || "none"
	- client = query.client || "guest"
	- ds = query.ds || "dsUndefined"
	- pivcol = "tbd"
	- dscols = query.cols || ""
	- dspage = 20
	- dsrefresh = query.refresh || ""
	- dstitle = ds + " view"
	- dims = "100%,100%"
	- dsdims = [1200,800]
	- tasks = projs ? get( projs , {Plugin:ds}, "Task,Hours,Complete,FAQ1,FAQ2") : []
	- more = parseInt(query.more) || 0
	- dsdb = `/${ds}.db`

	case mode
		when ""
			p= "no notebook specified"
		when "note"
		when "notebook"
		when "run"
			#grid.Usecases(
				path=dsdb,wrap,page=dspage,dims=dims,
				cols=dscols,menu="Agents",blogs="Description",hover="finished" )

				:markdown
					Run your *#{ds}* notebook by selecting the desired usecase context and clicking *Execute*.  
					
					You may also !{uses} your notebook.

					Your notebook's usecase context may include the following [optional keys](/api.view) ( add / remove ):  
					> [+](/#{ds}.add?Export=bool) [/-](/#{ds}.sub?Export) *Export* write notebook results into a file  
					> [+](/#{ds}.add?Ingest=bool) [/-](/#{ds}.sub?Ingest) *Ingest* ingest notebook results into the database  
					> [+](/#{ds}.add?Share=bool) [/-](/#{ds}.sub?Share) *Share* return notebook results to the status area  
					> [+](/#{ds}.add?Pipe=doc) [/-](/#{ds}.sub?Pipe) *Pipe* run usecase in supervised or enumerated workflow  
					> [+](/#{ds}.add?Description=doc) [/-](/#{ds}.sub?Description) *Description* document usecase  
					> [+](/#{ds}.add?Run=doc) [/-](/#{ds}.sub?Run) *Run* parameters { until: COUNT, every: "INTERVAL" || SECONDS, start: DATE, end: DATE }  
					> [+](/#{ds}.add?Entry=doc) [/-](/#{ds}.sub?Entry) *Entry* prime context on entry { KEY: "SELECT ...." || VALUE, ...}  
					> [+](/#{ds}.add?Exit=doc) [/-](/#{ds}.sub?Exit) *Exit* save context on exit { KEY: "UPDATE ....", ...}  
						  
					as well as context-saving keys:
					> *Save_STATE* aggregate streaming events [ {at:"STATE", ...}, ... ]  
					> *Save_jpg* generate jpg from {at: "jpg": prime: "name", save: "name", index: [...], values: [...] } event  
					> *Save* collect unaggregated streaming events  

					During execution, the *Pipe* will automatically add the context keys:
					> *$* returned dataset (chips, events, docs, images, ....)  
					> *Thread* name of compute thread

					Context keys can also be [grouped](/skinguide.view): e.g. g1_a, g1_b, g1_g2_x, g1_g2_y, _roX, _roY.
					
					Header colors reflect [notebook status](/projects.view): <font color="green">completed</font>, <font color="blue">policed</font>, <font color="orange">funded</font>, <font color="red">unfunded</font>.

			#form.Engine(
				path="/engines.db?Name=#{ds}",
				hover="pending",
				head="select,insert,update,|,delete,|,refresh,|,help",
				login="/login?pass=",
				cols="ID,Name,Type,Enabled.c,Program(Code.x,State.x.Context,Wrap.x)")

				:markdown
					Your notebook's [Engine](/api.view) remains invisible until it has been formally !{DOWNLOAD}ed
					and thus associated with an end-service provider as described in your 
					notebook's !{TOU} (Terms of Use).

			#grid.Jobs(
				path="/queues.db?Name=#{ds}",wrap,page=dspage,head="Print,Refresh,Execute,Help",hover="policed" , dims=dims,
				cols="Arrived.d,Departed.d,Class,Client,Notes.x,QoS.n,Age.n,Funded.c,Finished.c,Priority.n,Work.n,State.n,Task.t,Signoffs(Flagged.c,Sign0.c,Sign1.c,Sign2.c,Sign3.c)" )

				:markdown
					*Jobs* created by this notebook are show here.  If the job originator exceeded their credits,
					the job is marked "unfunded"; otherwise the job is marked "funded".  If you would like to 
					fund a job, simply click its "fund" link its Note.  To decide if this is a wise purchase, 
					consider the test case case being explored in your notebook and the provided  "RTP", 
					and "PMR" links.  Earning job credits is easy: simply upload your data using the 
					Files | Uploads.  Please note further that your jobs are regulated by your current 
					QoS level (0 || N = no || N seconds of delay between submittals).  *#{title}* will routinely
					inspect and clean-up the queues.

			#post.ToU(path="/#{ds}.tou",dims="1800,600",wrap)

			#grid.Bricks(
				path="/files.db", wrap, page=dspage, dims=dims,
				cols="Name,Path,Ingest,Classif,PoP_Expires,PoP_Start,PoP_End,PoP_durationDays,PoP_advanceDays" )

				:markdown
					*Bricks* allow you to attach a period-of-performance to your data pipes.  Certain 
					data quality metrics are also accumulated by the pipe's supervisor, stored within
					the brick, and credited to your profile.  *#{title}* will also routinely ingest and transparently 
					archive and restore data bricks.

			#grid.Logs( 
				path= "/syslogs.db?Table=#{ds}&Client=#{client}", wrap, page=dspage, dims=dims,
				cols="At.d,Node.t,Module.t,Case.t,Message.x,cpuUtil.p,memUtil.p" )
				
				:markdown
					Certain *logs* are traced during pipe exeuction.  These logs are collected here.  Observe
					that these logs may originate from different compute nodes in your cluster.
					*#{title}* will routinely flush old logs.

			if more>0
				#grid.ContextKeys(
					path="/keyedit.db?ds=#{ds}",wrap, page=dspage,
					cols="Key,Type,Samples.x,Dist,Parms.x")

			if more>1
				#post.Flow( path="/#{ds}_flow.view", dims="1800,600",wrap )

		when "pivot"
			#pivot( class=dstitle, path=dsdb, pivots=pivcol, cols=dscols )

		when "brief"
		when "gridbrief"
			section
				h3.hd= dstitle

				if query.data
					div!= gridify( query.data )

				else				
					iframe( src="/#{ds}.view", width=dsdims[0], height=dsdims[1] )

		when "pivbrief"
			section
				h3.hd= dstitle
				iframe( src="/#{ds}.pivot", width=dsdims[0], height=dsdims[1] )

		when "runbrief"
			section
				h3.hd= dstitle				
				iframe( src="/#{ds}.run", width=dsdims[0], height=dsdims[1] )

		when "calc"
			#grid( class=dstitle, path=dsdb, calc=1, cols="W*10", page=dspage )

		when "proj"
			#grid( class=dstitle, path=dsdb, cols=dscols, page=dspage )
			#post.ToU(path="/#{ds}.tou",dims="1800,600",wrap)
			#post.RTP(path="/rtpsqd.view?task=#{ds}",dims="1800,600",wrap)

		when "view"
		default
			#grid( class=dstitle, path=dsdb, cols=dscols, page=dspage,dims=dims )

// UNCLASSIFIED
