// UNCLASSIFIED
//-
	Render a skin when DEBE encounters dynamic view endpoints /DS.MODE where
		&mode = MODE
		&cols = [key.type, ...]
		&page = page size of DS grid
		&refresh = refresh time of associated job grid
		&width = post width
		&height = post height

extends base
append base_parms
	case query.mode
		when "brief"
		when "gridbrief"
		when "runbrief"
			- tech = "reveal"
		default
			- tech = "extjs"

extends site
append site_parms
	case query.mode
		when "site"
			- view = "Basic"
		when "view"
		when "pivot"
			- view = "Nada"
		when "plugin"
			- view = "Basic"
			- banner = ""
		when "run"
			- view = "Typical"
			- options = { "more+":"", "more++":"", less:"" }
		when "brief"
			- view = "Nada"
		default
			- view = "Nada"

append site_body

	- mode = query.mode
	- ds = query.ds || "plugin"
	- dscols = query.cols || []
	- dspage = query.page || 20
	- dsquery = query.search || ""
	- dsrefresh = query.refresh || ""
	- dspath = `/${ds}.db?${dsquery}`
	- dstitle = ds + " view"
	- dsdims = query.dims
	- dims = dsdims.split(",")
	- height = dims.pop()
	- width = dims.pop()
	- tasks = projs ? get( projs , {Plugin:ds}, "Task,Hours,Complete,FAQ1,FAQ2") : []
	- more = parseInt(query.more) || 0

	case mode
		when "plugin"
		when "run"
			#grid.Usecase(
				path=dspath,
				cols=dscols.join(),
				menu="Agents",
				wrap,
				dims=dsdims,
				hover="finished",
				page=dspage )

				:markdown
					This *#{ds}* plugin provides a coupled dataset-engine to execute its engine with the selected usecase.  Simply 
					select	a usecase, then click the execute/run button. 
					
					You may run any plugin from the url bar:

						GET /PLUGIN.exe?id=CASE 	Run PLUGIN engine with id-specified use-CASE parameters
						GET /PLUGIN.exe?name=CASE 	Run PLUGIN engine with name-specified use-CASE parameters

					Plugins may also be placed in job workflows when they contain (reserved) parameters:

							(Save) json reserve for storing the results of this CASE
							(Job) json parameters to place CASE into QoS-Credit regulated queue.
							(Task) name of project associated with this CASE
							(Description) bloggable report on this CASE
							(Ingest) switch to ingest results produced by this CASE
							
					Use  [Save+](/#{ds}.add?Save=doc), [Job+](/#{ds}.add?Job=doc), [Task+](/#{ds}.add?Task=name), [Description+](/#{ds}.add?Description=doc),
					[Ingest+](/#{ds}.add?Ingest=true), to add; Save-](/#{ds}.sub?Save), [Job-](/#{ds}.sub?Job), [Task-](/#{ds}.sub?Task), 
					[Description-](/#{ds}.sub?Description), [Ingest-](/#{ds}.sub?Ingest) to remove these parameters from the *#{ds}* plugin.   
					
					Plugins are tied with #{title}'s data ingest process: when events are ingested, the CASE="ingest" 
					record is cloned with Job parameters adjusted to the ingested events.

					A plugin may also contain a (Description) parameter; this may contains bloggable markdown  tags

						 [image | post | update | link | SKIN, W, H, DS?QUERY]( /url | PARM=r.KEY expression; ...)

					to document the test case.  For example:
					
						[plot,100,200](x=r.Save.a;ys=[r.Save.b,r.Save.c])
						[post,500,100](/home.view)
						[link](https:/go.here)
						[image](/shares/a1.jpg)
						[force,100,100,queues.tree?_pivots=class]()
						
					will embed (1) a plot of the requested x,y data using the [d3 plot](/plot.view), (2) the 
					[home.view](/home.view), (3) a link to the url, (4) the [image](/shares.jpg), and (5) a
					force graph of the queues dataset pivoted by class using the [d3 force](/force.view) 
					into a frame of specified W x H dimensions.
					
					Toggle the blog button to edit / blog the Description.

					The header color indicates the status of the *#{ds}* plugin: completed (green), policed (blue),
					funded (orange), unfunded (red).  The *#{ds}* plugin impacts the following tasks:
					
				table!= gridify(tasks)
	
			#form.Engine(
				path="/engines.db?Name=#{ds}",
				hover="pending",
				cols="Name,Engine,Enabled.c,Program(Code.x,Vars.x.Context)")

				:markdown
					[Engines](/api.view) contain js | python | matlab | opencv | ... code.  Click the execute 
					button to test the engine with its default context parameters.  See [DSP](https://www.npmjs.com/package/dsp), 
					[LWIP](https://github.com/EyalAr/lwip),  [MATH](http://mathjs.org/), 
					[CRYPTO](https://nodejs.org/docs/latest/api/), [FLEX](https://github.com/ACMESDS/flex), 
					[MATH](http://mathjs.org/), 
					[RAN](https://github.com/ACMESDS/flex), [SVD](https://www.npmjs.com/package/node-svd), 
					[MLE](linktbd), [MVN](linktbd), [MAIL](linktbd) for 
					the js-modules attached to all js-engines.  Import py-modules as needed for a py-engine.
					
			#grid.Jobs(
				path="/queues.db?Class=#{ds}",
				cols="Arrived.d,Departed.d,Client,Notes.x,QoS.n,Age.n,Funded.c,Finished.c,Priority.n,Work.n,State.n,Task.t,Signoffs(Flagged.c,Sign0.c,Sign1.c,Sign2.c,Sign3.c)",
				refresh=dsrefresh,
				wrap,
				head="Print,Refresh,Execute,Help",
				hover="policed",
				page=dspage )

				:markdown
					Jobs created by this plugin are show here.  If the job originator exceeded their credits,
					the job is marked "unfunded"; otherwise the job is marked "funded".  If you would like to 
					fund an unfended job, simply click its "(un)funded" link.  To decide if this is a wise purchase, 
					click the "#{ds}" link to see the test case case being explored; additional project information,
					if available, is attached as "RTP", "PMR" etc links.  Earning job credits is easy: simply 
					upload your data using the Files | Uploads.

			if more>0
				#grid.Keys(
					path="/keyedit.db?ds=#{ds}",
					cols="Key,Type,Samples.x,Dist,Parms.x",
					wrap,
					page=dspage)
					
			if more>1
				#flow.Flow( path="#{ds}", dims="800,600",wrap )

		when "pivot"
			- pcol = dscols.pop()
			#pivot(
				class=dstitle,
				path=dspath,
				pivots=pcol,
				cols=dscols.join(),
				page=dspage )

		when "brief"
		when "gridbrief"
			section
				h3.hd= dstitle

				if query.data
					div!= gridify( query.data )

				else				
					iframe(
						src="/#{ds}.view?dims=#{dsdims}",
						width=width,
						height=height )

		when "pivbrief"
			section
				h3.hd= dstitle
				iframe(
					src="/#{ds}.pivot?dims=#{dsdims}",
					width=width,
					height=height )

		when "runbrief"
			section
				h3.hd= dstitle				
				iframe(
					src="/#{ds}.run?dims=#{dsdims}",
					width=width,
					height=height )

		default
			#grid(
				class=dstitle,
				path=dspath,
				cols=dscols.join(),
				dims=dsdims,
				page=dspage )

// UNCLASSIFIED
