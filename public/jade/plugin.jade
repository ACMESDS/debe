// UNCLASSIFIED
//-
	Render a skin when DEBE encounters dynamic view endpoints /DS.MODE where
		&mode = MODE = brief | gridbrief | runbrief | pivbrief| run | plugin | view | pivot
		&cols = [key.type.label, ...]
		&page = page size of DS grid
		&refresh = refresh time of associated job grid
		&width = post width
		&height = post height

extends base
append base_parms
	case query.mode
		when "brief"
		when "gridbrief"
		when "runbrief"
		when "pivbrief"
			- tech = "reveal"
		default
			- tech = "extjs"

extends site
append site_parms
	case query.mode
		when "site"
			- view = "Basic"
		when "plugin"
			- view = "Insert"
			- options = { "more+":"", "more++":"", less:"" }
		when "run"
			- view = "Typical"
			- options = { "more+":"", "more++":"", less:"" }
		default
			- view = "Nada"

append site_body

	- mode = query.mode
	- ds = query.ds || "myplugin"
	- dscols = query.cols || []
	- dspage = query.page || 20
	// - dsquery = query.search || ""
	- dsrefresh = query.refresh || ""
	- dspath = `/${ds}.db`
	- dstitle = ds + " view"
	- dsdims = query.dims
	- dims = dsdims.split(",")
	- height = dims.pop()
	- width = dims.pop()
	- tasks = projs ? get( projs , {Plugin:ds}, "Task,Hours,Complete,FAQ1,FAQ2") : []
	- more = parseInt(query.more) || 0

	case mode
		when "plugin"
		when "run"
			#grid.Usecases(
				path=dspath,
				cols=dscols.join(),
				menu="Agents",
				wrap,
				blogs="Description",
				dims=dsdims,
				hover="finished",
				page=dspage )

				:markdown
					Execute your *#{ds}* engine from its [customizable](/skinguide) [run](#{ds}.run), [usecase](#{ds}.view), or 
					[plugin](#{ds}.plugin) view by selecting the desired usecase and clicking *Execute*.  You may also 
					execute *#{ds}* [directly](/api.view) by [usecase Name](/#{ds}.exe?name=CASE) or by [usecase ID](#{fs}.exe?id=CASE).
					
					Your *#{ds}* engine **context** can include:  
					> [Export+](/#{ds}.add?Export=false) [/-](/#{ds}.sub?Export) writes engine results into a file  
					> [Ingest+](/#{ds}.add?Ingest=false) [/-](/#{ds}.sub?Ingest) ingests engine results into the database  
					> [Share+](/#{ds}.add?Share=false) [/-](/#{ds}.sub?Share) saves engine results to the status area  
					> [Pipe+](/#{ds}.add?Pipe=doc) [/-](/#{ds}.sub?Pipe) regulates chips and events to the engine  
					> [Description+](/#{ds}.add?Description=doc) [/-](/#{ds}.sub?Description) documents a usecase  
					> [Config+](/#{ds}.add?Config=doc) [/-](/#{ds}.sub?Config) defines usecase context with a js-engine  
					> [Save+](/#{ds}.add?Save=doc) [/-](/#{ds}.sub?Save) aggregates engine results not captured in the Save_KEYs  
					> [Save_KEY](/#{ds}.run?options=more) aggregates engine results [{at:"KEY", ...}, ...]  
					
					When executed, the **context** of your *#{ds}* engine is automatically extended with:  
					> Host name of plugin  
					> File current file during workflow  
					> Voxel current voxel being procesed  
					> Collects sensor collects made under current voxel  
					> Chip  filepath for first jpeg collect under current voxel  
					> Flux solar flux at earth's surface under current voxel  
					> Events event query for current voxel  
					> Flow context of Markov/ROC supervisor
					
					To place your *#{ds}* engine into #{nick}'s supervised Markov workflow, simply provide:  
					> [Batch+](/#{ds}.add?Batch=0) [/-](/#{ds}.sub?Batch) workflow steps when event batch us supervised (0 disabled)  
					> [Symbols+](/#{ds}.add?Symbols=[]) [/-](/#{ds}.sub?Symbols) override workflow default state symbols (null defaults)  
					> [Steps+](/#{ds}.add?Steps=0) [/-](/#{ds}.sub?Steps) override workflow default process steps (0 defaults)
					
					The *Pipe* key contains job regulation parameters:  
					> file: "/NODE" || "PLUGIN.CASE" || "FILE.TYPE" || [ {x,y,z,t,u,n, ...}, ... ]
					> group: "KEY,..." || ""  
					> where: { KEY: VALUE, ...} || {}  
					> order: "KEY,..." || "t"  
					> limit: VALUE || 1000  
					> task: "NAME" || ""  
					> aoi: "NAME" || [ [lat,lon], ... ] || []

					and its *Description* key may contain [blogging tags](/api.view) to document its usecases:  
					> \[ VIEW ; WIDTH ; HEIGHT ]( DS ? PARM ; PARM ; ... )  
					> \[ LINK ]( URL )   
					> !$ inline TeX $  ||  $$ break TeX $$ || a$ AsciiMath $ || m$ MathML $  || ^{ TeX matrix KEY } || 
					> \#{ KEY } || \#{ KEY }( SHORTCUT ) || \!{ EXPR }  
					> \#tag
				
					Usecases are colorized to reflect the plugin's [development status](/milestones.view): completed/green, policed/blue, 
					funded/orange, unfunded/red.
					
				table!= gridify(tasks)
	
			#form.Engine(
				path="/engines.db?Name=#{ds}",
				hover="pending",
				head="select,insert,update,|,delete,|,refresh,login",
				login="/login?pass=",
				cols="ID,Name,Type,Enabled.c,Program(Code.x,State.x.Context)")

				:markdown
					[Engines](api.view) automatically have the LWIP,SQL and JSON modules; js-engines also automatically have the
					[MAT matlab emulator](https://www.npmjs.com/package/mathjs),
					[DSP digitial signal processing](https://www.npmjs.com/package/dsp), 
					[CRY crypto](https://nodejs.org/docs/latest/api/crypto),
					[FLEX data extender](https://github.com/ACMESDS/flex),
					[RAN markov random process](https://github.com/ACMESDS/randpr),
					[SVD singular value decomposition](https://www.npmjs.com/package/node-svd),
					[VITA hidden markov model solver](https://www.npmjs.com/package/nodehmm),
					[MLE maximum liklihood estimator](https://www.npmjs.com/package/node-svd),
					[MVN multivariate normals](https://www.npmjs.com/package/multivariate-normal), and
					[MAIL simple mail transfer](https://www.npmjs.com/package/nodemailer)
					modules.  
					
			#grid.Jobs(
				path="/queues.db?Class=#{ds}",
				cols="Arrived.d,Departed.d,Client,Notes.x,QoS.n,Age.n,Funded.c,Finished.c,Priority.n,Work.n,State.n,Task.t,Signoffs(Flagged.c,Sign0.c,Sign1.c,Sign2.c,Sign3.c)",
				wrap,
				head="Print,Refresh,Execute,Help",
				hover="policed",
				page=dspage )

				:markdown
					sorts="Work,State"
					refresh=refresh
					Jobs created by this plugin are show here.  If the job originator exceeded their credits,
					the job is marked "unfunded"; otherwise the job is marked "funded".  If you would like to 
					fund an unfended job, simply click its "(un)funded" link.  To decide if this is a wise purchase, 
					click the "#{ds}" link to see the test case case being explored; additional project information,
					if available, is attached as "RTP", "PMR" etc links.  Earning job credits is easy: simply 
					upload your data using the Files | Uploads.

			if more>0
				#grid.ContextKeys(
					path="/keyedit.db?ds=#{ds}",
					cols="Key,Type,Samples.x,Dist,Parms.x",
					wrap,
					page=dspage)
					
			if more>1
				#post.Flow( path="/#{ds}_flow.view", dims="800,600",wrap )

		when "pivot"
			- pcol = dscols.pop()
			#pivot(
				class=dstitle,
				path=dspath,
				pivots=pcol,
				cols=dscols.join(),
				page=dspage )

		when "brief"
		when "gridbrief"
			section
				h3.hd= dstitle

				if query.data
					div!= gridify( query.data )

				else				
					iframe(
						src="/#{ds}.view?dims=#{dsdims}",
						width=width,
						height=height )

		when "pivbrief"
			section
				h3.hd= dstitle
				iframe(
					src="/#{ds}.pivot?dims=#{dsdims}",
					width=width,
					height=height )

		when "runbrief"
			section
				h3.hd= dstitle				
				iframe(
					src="/#{ds}.run?dims=#{dsdims}",
					width=width,
					height=height )

		when "calc"
			#grid(
				class=dstitle,
				path=dspath,
				calc=1,
				cols="W*10",
				dims=dsdims,
				page=dspage )
				
		default
			#grid(
				class=dstitle,
				path=dspath,
				cols=dscols.join(),
				dims=dsdims,
				page=dspage )

// UNCLASSIFIED
