// UNCLASSIFIED 
extends base
append base_help
	:markdown
		 Produce d3 plot with parameters:  

			src = /ds?query source-x-y spec to provide [ [x1,...] ,[y1,...] ] data
			x = source key
			y = source key
			mods = KEY,... src modifiers
			ds = /ds?query overrides src
			w = drawing width
			h = drawing height
			debug = level send debugging alerts
			grid = X,Y axes grid
			line = color,color, ... line color
			marker = style,style, ... line markers
			label = X,Y labels
			min = X,Y axis minimums
			max = X,Y axis maximums
			details = show xy locations
			chan = widget "min:max:step" on x,y channels

append base_parms
	- tech = "d3"

append base_head

	style.
		.line {
			fill: none;
			stroke: #ffab00;
			stroke-width: 3;
		}

		.overlay {
		  fill: none;
		  pointer-events: all;
		}

		.dot {
			fill: #ffab00;
			stroke: #fff;
		}

		.focus circle {
			fill: none;
			stroke: steelblue;
		}
		
		body { font: 18px sans-serif; }

		.axis path, .axis line {
		  fill: none;
		  stroke: #000;
		  shape-rendering: crispEdges;
		}

		.axis text {
		  font: 10px sans-serif;
		}

		.marker { stroke: #000; }

		.legend { }

		.text {}

	script.
		var 
			modifier = ("!{query.mods}" || "").option({
				//beta: "/beta?name=gen-$a-$b&x:=Save$[0].x&y:=Save$[0].y"
				//beta: "/beta?name=gen-$a-$b&xy:=Save$[0].x,[0].y&_calc=xy"
				beta: "&_$=[x,y]??/beta.exe?alpha=^a&beta=^b&N=20&_$.Save=list(x,y)",
				cost: [
					"&_$[0].y=list(yr,{",
					 "BKL:queue/150e3,PRO:proc/100e3,LAB:lab/150e3,ACQ:acq/50e6,CYC:cycles/50,NRE:nre/450e3",
					 "})"
				].join("")
			}) || "&_$=[x,y]", 
			opts = {  // define plot options
				ds: "!{query.src}"
						? "!{query.src}&x:=#{query.x}&y:=#{query.y}" + modifier
						:  "!{query.ds}"
								? "!{query.ds}" + modifier
								:  "/regress&x=Save_train$.x[$chan]&y=Save_train$.y[$chan]?name=test2",
				dims: {
					margin: {top: 5, right: 10, bottom: 5, left: 10},
					width: parseInt("#{query.w}") || 1200,
					height: parseInt("#{query.h}") || 500
				},
				debug: parseInt("#{query.debug}"),
				grid: ("#{query.grid}" || "1,1").split(","),
				marker: ( "#{query.marker}" || "circle" ).option(),
				line: ( "#{query.line}" || "black" ).option(),
				label: ( "#{query.label}" || "x,y" ).option(),
				min: ("#{query.min}" || "0,0").split(","),
				max: ("#{query.max}" || "1,1").split(","),
				//extra: null, //"#{query.extra}".option(),
				details: "#{query.details}",
				//index: "#{query.index}".option(),
				//keys: ("#{query.keys}" || "x,y,details").option(),

				url: "#{url}",
				family: "plot,barplot",

				widgets: {
					chan: ("#{query.chan}" || "0:255").option(),
					a: ("#{query.a}" || "0.5").option(),
					b: ("#{query.b}" || "0.5").option(),
					xxsave: false 
						? () => {
								alert("reserved");
								return;
								var 
									a = document.getElementById("_a").value,
									b = document.getElementById("_b").value,
									name = `gen-${a}-${b}`,
									beta = `/beta?Name=${name}`;

								Ajax("put", true, beta, res => {
									alert(res);
								}, {
									snr: 1,
									gain: 1,
									density: 1
								});
							}
						: null
				}
			};

		const {NODE, NODES, VALUE, SIZE, PARENT, DOC} = opts;
		//const {isString,isArray,Fetch,Log} = BASE;

append base_body
	if !query.help
		script.
			Fetch( opts, (data,svg) => {
				function plotData(rec,name) {
					function xyplot(x,y,cb) {

						/*
						function index(pair) {
							if (xIndex) pair.x = xIndex.parseEval(pair.x);
							if (yIndex) pair.y = yIndex.parseEval(pair.y);
							return pair;
						}
						*/
						
						var
							x0 = x.forEach ? x[0] || 0 : 0,
							y0 = y.forEach ? y[0] || 0 : 0,
							Nx = x0.forEach ? x0.length : 0,
							Ny = y0.forEach ? y0.length : 0,
							xy = [],
							mode = ((Nx <= 1) ? Nx : "n") + "/" + ((Ny <= 1) ? Ny : "n");

						Log( `plot ${mode} [${Nx}x${Ny}] Nplot=${plots}` );

						switch ( mode ) {
							case "n/n":		// series plot
								for ( var n=0; n<Nx; n++ ) xyplot( x[n], y[n], cb );
								return;

							case "n/1":		// cluster plot
								x.forEach( (xn,n) => {
									xy.push( { x: xn[0], y: xn[1], f: y[n][0] } );	// d3 assigns y to 1 of 10 fill categories
								});	
								break;

							case "n/0":		// cluster plot
								x.forEach( (xn,n) => {
									xy.push( { x: xn[0], y: xn[1], f: y[n] } );
								});	
								break;

							case "1/1": // scatter plot
								x.forEach( (xn,n) => {
									xy.push( { x: x[n][0], y: y[n][0], f: 0 } );
								});	
								break;

							case "0/0": // scatter plot
								if ( x.forEach )
									x.forEach( (xn,n) => {
										xy.push( {x: x[n], y: y[n], f: 0} );
									}); 

								else
									xy.push( { x: x, y: y, f: 0 } );

								break;

							case "1/0": // scatter plot
								x.forEach( (xn,n) => {
									xy.push( { x: x[n][0], y: y[n], f: 0 } );
								});	
								break;

							case "0/1": // scatter plot
								x.forEach( (xn,n) => {
									xy.push( { x: x[n], y: y[n][0], f: 0 } );
								});	
								break;							
						}

						if ( extra = opts.extra )	// append extra xy data
							for (var N=extra.length, n=0; n<N; n++)
								xy.push( {x: extra[n], y: extra[n] } ); 

						if ( opts.debug>2 ) alert( JSON.stringify(xy) );

						if ( !plots ) {  // setup axes on first source
							/*
							svg
							.append('path')
							.attr('d', line([[opts.min[0],opts.min[1]],[opts.max[0],opts.min[1]]]))
							.attr('stroke', "black")
							.attr('stroke-width', 2)
							.attr('fill', 'none');

							svg
							.append('path')
							.attr('d', line([[opts.min[0],opts.min[0]],[opts.min[0],opts.max[1]]]))
							.attr('stroke', "black")
							.attr('stroke-width', 2)
							.attr('fill', 'none');
							*/
							/*
							if (opts.ref.length) 
								svg
								.append('path')
								.attr('d', line(opts.ref))
								.attr('stroke', "black")
								.attr('stroke-width', 2)
								.attr('fill', 'none');

							if (opts.name) {   // add legend
								var legend = svg
								.selectAll(".legend")
								.data(color.domain())
								.enter()
								.append("g")
								.attr("class", "legend")
								.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

								for (var m=0,M=opts.name.length; m<M; m++) {
									svg
									.append("rect")
									.attr("x", width - 18)
									.attr("width", 25)
									.attr("height", 25)
									.style("fill", opts.line[m] || "black");

									svg
									.append("text")
									.attr("x", width - 24)
									.attr("y", 9)
									.attr("dy", ".35em")
									.style("text-anchor", "end")
									.text(opts.name[m]);
								}
							}*/
						}

						if ( style = markerStyles[plots] || markerDef ) {  // add markers
							svg.append("g")
									.selectAll( style )
									.data(xy)
									.enter()
										.append( style )
										.attr("class", "marker")
										.attr("r", 3.5)
										.attr("cx", d => xscale(d.x) )  
										.attr("cy", d => yscale(d.y) )
										.on("click", d => {
											if (details = d[2] ) {
												var isView = details.constructor == String;

												var doc = window.open(
													isView ? d[2] : "",
													"_blank",
													"left="+d.x+"px,"
													+ "top="+d.y[plots]+"px,"
													+ "width=50,height=50,location=0,menubar=0,status=0,titlebar=0,toolbar=0");

												if ( !isView )
													doc.document.write(JSON.stringify( details ));
											}
										})
										.style("fill", d => color( d.f ) );
						}

						if ( style = lineStyles[plots] || lineDef ) if ( xy.length>1 ) { // add lines

							var line = d3.line()
									.x( d => xscale(d.x) )
									.y( d => yscale(d.y) );
									//.interpolate('linear');

							svg
									.append('path')
									.attr('d', line(xy))
									.attr('stroke', style )
									.attr('stroke-width', 2)
									.attr('fill', 'none');
						}

						if ( details = opts.details ) {  // add label details
							svg.selectAll(".text")
									.data(xy)
									.enter()
											.append("text")
											.text( d => details+":"+d.x.toFixed(2)+" , "+d.y.toFixed(2) )
											.attr("x", d => xscale(d.x) )
											.attr("y", d => yscale(d.y) )
											.attr("dy", ".35em")
											.attr("font-family", "sans-serif")
											.attr("font-size", "11px")
											.attr("fill", "red"); 
						}

						cb( ++plots );
					}

					//if (opts.debug > 2) alert( "case: "+ name );

					var
						//x = rec.x || [],
						//y = rec.y || [],
						min = opts.min,
						max = opts.max,
						//plots = 0,
						hard = min[0] ? { x: [parseFloat(min[0]), parseFloat(max[0])], y: [parseFloat(min[1]), parseFloat(max[1])] } : null;

					//d3.select("svg").remove();

					var
						xscale = d3.scaleLinear()
								.domain( hard ? hard.x : [0,1])
								.range([0, width]),

						yscale = d3.scaleLinear()
								.domain( hard ? hard.y : [0,1])
								.range([height, 0]),

						colors = 10,
						color = d3.scaleOrdinal( d3.schemeCategory10 ),

					// need to fix this so when !hard scans over all x,y data to set domains
					//		xscale.domain(d3.extent(xy, d => d.x )).nice();
					//		yscale.domain(d3.extent(xy, d => d.y )).nice();

						xAxis = d3.axisBottom(xscale),
						yAxis = d3.axisLeft(yscale);

					for (var n=0, N=parseInt(opts.grid[0] || "1"), del=height/N, off=(N==1) ? height/2 : 0; n<N; n++, off+=del) {
						svg.append("g")
								.attr("class", "x axis")
								.attr("transform", "translate(0," + off + ")")
								.call(xAxis)
								.append("text")
								.attr("class", "label")
								.attr("x", width)
								.attr("y", -45)
								.attr("dy", "1em")
								.style("text-anchor", "end")
								.text( opts.label[0] );
					}

					for (var n=0, N=parseInt(opts.grid[1] || "1"), del=width/N, off=(N==1) ? width/2 : 0; n<N; n++, off+=del) {
						svg.append("g")
								.attr("class", "y axis")
								.attr("transform", "translate(" + off + ",0)")
								.call(yAxis)
								.append("text")
								.attr("class", "label")
								.attr("transform", "rotate(-90)")
								.attr("y", 20)
								.attr("dy", "1em")
								.style("text-anchor", "end")
								.text( opts.label[1] );
					}

					color.domain( d3.range(0,colors) );

					if ( rec.forEach ) {
						var [x,y] = rec;
						
						//Log(name, x,y);
						if ( y )
							if ( y.forEach )
								xyplot(x, y, plots => {} );
						
							else
								for (var key in y )
									xyplot(x, y[key], plots => {} );
						
						else
						if ( x.forEach )
							x.forEach( (rec,n) => plotData( rec, name+"/"+n ) );
						
						else
							for ( var key in x ) 
								plotData( x[key], name+"/"+key );
					}
					
					else 
						for ( var key in rec ) 
							plotData( rec[key], name+"/"+key );
				}
			
				var 
					width = svg.attr("width"),
					height = svg.attr("height"),			
					margin = opts.dims.margin,
					plots = 0,
					svg = svg.append("g")
							.attr("transform", "translate(" + margin.left + "," + margin.top + ")"),

					body = d3.select("body"),
					markerStyles = opts.marker || [],
					markerDef = markerStyles[0],
					lineStyles = opts.line || [],
					lineDef = lineStyles[0];
					//xIndex = opts.index[0],
					//yIndex = opts.index[1];

				plotData( data, "" );			
			});
