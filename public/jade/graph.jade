//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display sankey chart:

			src = source url
			w = drawing width
			h = drawing height
			debug = dump derived options

append base_head
	style.
		.node rect {
			cursor: move;
			fill-opacity: .9;
			shape-rendering: crispEdges;
		}
		.node text {
			pointer-events: none;
			text-shadow: 0 1px 0 #fff;
		}
		.link {
			fill: none;
			stroke: #000;
			stroke-opacity: .2;
		}
		.link:hover {
			stroke-opacity: .5;
		}

	script.
		var opts = {
			ds: 
				"!{query.src}"
					? "!{query.src}?name=#{query.name}&x:=#{query.x}&y:=#{query.y}&case:=name"
					:  "/stores/graph.json",
			dims: {
				margin: {top: 20, right: 90, bottom: 30, left: 90},
				width: parseInt("#{query.w}") || 1200,
				height: parseInt("#{query.h}") || 500
			},
			debug: parseInt("#{query.debug}"),
		};

		const {NODE, NODES, VALUE, SIZE, PARENT, DOC} = opts;
		const {isString,isArray,d3json} = BASE;

append base_body
	script.
		// https://www.d3-graph-gallery.com/graph/network_basic.html
		d3json( opts, (data,svg) => {
			var
				width = svg.attr("width"),
				height = svg.attr("height");
				
			var 
				graph = data[0],
				nodes = graph.nodes,
				links = graph.links;
		
			// Initialize the links
			var link = svg
				.selectAll("line")
				.data(links)
				.enter()
					.append("line")
					.style("stroke", "#aaa")

			// Initialize the nodes
			var node = svg
				.selectAll("circle")
				.data(nodes)
				.enter()
					.append("circle")
					.attr("r", 20)
					.style("fill", "#69b3a2")
			
			// Let's list the force we wanna apply on the network
			nodes.forEach( (node,id) => { nodes[id].id = id; } );
			var simulation = d3.forceSimulation(nodes) 	// Force algorithm is applied to data.nodes
				.force("link", d3.forceLink()                      // This force provides links between nodes
					.id(function(d) { return d.id; })               // This provide  the id of a node
					.links(links)                                    // and this the list of links
				)
				.force("charge", d3.forceManyBody().strength(-400))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength
				.force("center", d3.forceCenter(width / 2, height / 2))     // This force attracts nodes to the center of the svg area
				.on("tick",   () => {  // run at each iteration of the force algorithm, updating the nodes position.
					link
						.attr("x1", function(d) { return d.source.x; })
						.attr("y1", function(d) { return d.source.y; })
						.attr("x2", function(d) { return d.target.x; })
						.attr("y2", function(d) { return d.target.y; });

					node
						 .attr("cx", function (d) { return d.x+6; })
						 .attr("cy", function(d) { return d.y-6; });
				});

		});
		
//- UNCLASSIFIED
