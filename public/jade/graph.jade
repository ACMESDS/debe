//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display graph network:

			src = source url
			w = drawing width
			h = drawing height
			debug = dump derived options

append base_head
	style.
		.links line {
		  stroke: #999;
		  stroke-opacity: 0.6;
		}

		.nodes circle {
		  stroke: #fff;
		  stroke-width: 1.5px;
		}

		text {
		  font-family: sans-serif;
		  font-size: 10px;
		}	
	
	script.
		var opts = {
			ds: 
				"!{query.src}"
					? "!{query.src}"
					:  "/stores/graph2.json",
			dims: {
				margin: {top: 10, right: 10, bottom: 10, left: 10},
				width: parseInt("#{query.w}") || 1200,
				height: parseInt("#{query.h}") || 500
			},
			debug: parseInt("#{query.debug}"),
		};

		const {NODE, NODES, VALUE, SIZE, PARENT, DOC} = opts;
		const {isString,isArray,Fetch,Log} = BASE;

append base_body
	script.
		// https://www.d3-graph-gallery.com/graph/network_basic.html
		// https://bl.ocks.org/heybignick/3faf257bbbbc7743bb72310d03b86ee8
		var color = d3.scaleOrdinal(d3.schemeCategory10);
		color.domain( d3.range(0,10) );

		Fetch( opts, (data,svg) => {
			var
				//svg = d3.select("svg"),
				width = svg.attr("width"),
				height = svg.attr("height");
				
			//Log(width,height);
			const { nodes, links } = data[0];
			/*var 
				graph = data[0],
				nodes = graph.nodes,
				links = graph.links; */
			if ( node = nodes[0] )
				if ( !("id" in node) )	// tag nodes with id if unspecified
					nodes.forEach( (node,n) => nodes[n].id = n ); 
			
			// Initialize the links
			/*var linksvg = svg
				.selectAll("line")
				.data(links)
				.enter()
					.append("line")
					.style("stroke", "#aaa");  */

			var linksvg = svg.append("g")
					.attr("class", "links")
					.selectAll("line")
					.data(links)
					.enter()
						.append("line")
						.attr("stroke-width", d => Math.sqrt(d.value) );

			// Initialize the nodes
			/*
			var nodesvg = svg
				.selectAll("circle")
				.data(nodes)
				.enter()
					.append("circle")
					.attr("r", 20)
					.style("fill", "#69b3a2");  */
		
			var nodesvg = svg.append("g")
					.attr("class", "nodes")
					.selectAll("g")
					.data(nodes)
					.enter()
						.append("g");
		
			/*var labelsvg = svg
				.selectAll( null )
				.data( nodes )
				.enter()
					.append("text")
					.text( d => d.name )
					.style("text-anchor", "middle")
					.style("fill", "#555")
					.style("font-family", "Arial")
					.style("font-size", 10); */
			
			var circles = nodesvg.append("circle")
				.attr("r", 10)
				.attr("fill", d => color(d.group || "nada" ) )
				.call(
					d3.drag()
						.on("start", d => {
							 if (!d3.event.active) sim.alphaTarget(0.3).restart();
							 d.fx = d.x;
							 d.fy = d.y;
						})
						.on("drag", d => {
							  d.fx = d3.event.x;
							  d.fy = d3.event.y;							
						})
						.on("end", d => {
							  if (!d3.event.active) sim.alphaTarget(0);
							  d.fx = null;
							  d.fy = null;							
						})
				); 

			var lables = nodesvg.append("text")
				.text( d => d.name );
				//.attr('x', d => d.x )
				//.attr('y', d => d.y );

			// Let's list the force we wanna apply on the network
		
			var sim = d3.forceSimulation() 	// Force algorithm is applied to data.nodes
				.force("link", d3.forceLink()                      // This force provides links between nodes
					.id( d => d.id )               // This provides the id of a node
				)
				.force("charge", d3.forceManyBody().strength(-500))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength
				.force("center", d3.forceCenter(width / 2, height / 2));     // This force attracts nodes to the center of the svg area
		
			sim
				.nodes(nodes)
				.on("tick",   () => {  // run at each iteration of the force algorithm, updating the nodes position.
					linksvg
						.attr("x1", d => d.source.x )
						.attr("y1", d => d.source.y )
						.attr("x2", d => d.target.x )
						.attr("y2", d => d.target.y );

					/*nodesvg
						.attr("cx", d => d.x+6 )
						.attr("cy", d => d.y-6 );					*/
					nodesvg
						.attr("transform", function(d) {
							return "translate(" + d.x + "," + d.y + ")";
						});
				})
				.force("link")
				.links(links);                 // and this the list of links

		});
		
//- UNCLASSIFIED
