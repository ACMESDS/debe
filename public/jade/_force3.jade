//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display d3 force graph:

			src = source url returning [ { name: "...", size: N, children: [ {...}, ... ] }, ... ]
			pivots = key,key,...
			w = drawing width
			h = drawing height
			debug = debugging level
			node,children,value,size,parent = key names

		Graph nodes are sized to node.weight + length(node[CHILDREN]).

append base_head
	style.
		circle.node {
			cursor: pointer;
			stroke: #000;
			stroke-width: .5px;
		}
		line.link {
			fill: none;
			stroke: #9ecae1;
			stroke-width: 1.5px;
		}

	script.
		var opts = {
			ds: "#{query.pivots}"
				? "/!{query.src}.tree?name=#{query.name}&_sort=#{query.pivots}"
				: "#{query.name}"
							? "/!{query.src}.schema?name=#{query.name}"
							: "/!{query.src}",

			w: parseInt("#{query.w}") || 200,
			h: parseInt("#{query.h}") || 200,
			debug: parseInt("#{query.debug}"),
			NODE: "#{query.node}" || "name",
			CHILDREN: "#{query.children}" || "children",
			VALUE: "#{query.value}" || "value",
			PARENT: "#{query.parent}" || "parent",
			SIZE: "#{query.size}" || "size"										
		};

		const {NODE, CHILDREN, VALUE, SIZE, PARENT} = opts;

append base_body

	script.
		function update() {
			var 
				nodes = flatten(root),
				links = d3.layout.tree().links(nodes);

			//alert(JSON.stringify(nodes));

			// Restart the force layout.
			force
				.nodes(nodes)
				.links(links)
				.start();

			// Update the links
			link = vis.selectAll("line.link")
				.data(links, function(d) { return d.target.id; });

			// Enter any new links.
			link.enter().insert("line", ".node")
				.attr("class", "link")
				.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });

			// Exit any old links.
			link.exit().remove();

			// Update the nodes
			node = vis.selectAll("circle.node")
				.data(nodes, function(d) { return d.id; })
				.style("fill", color);

			node.transition()
				.attr("r", function(d) { 
					return d[SIZE];
					// return d[CHILDREN] ? (d[SIZE]||1)*d[CHILDREN].length : 10; //d[SIZE] ? Math.sqrt(d[SIZE]) / 10 : 10; 					
					// 	return 5; 
					//	return d[CHILDREN] ? 14.5 : d[SIZE] ? Math.sqrt(d[SIZE]) / 1 : 200; 
				});

			// Enter any new nodes.
			node.enter().append("circle")
				.attr("class", "node")
				.attr("cx", function(d) { return d.x; })
				.attr("cy", function(d) { return d.y; })
				.attr("r", function(d) { 
					return d[SIZE];
					//return d[CHILDREN] ? (d[SIZE]||1)*d[CHILDREN].length : d[SIZE] ? Math.sqrt(d[SIZE]) / 10 : 2; 
				})
				.style("fill", color)
				.on("click", click)
				.call(force.drag);

			// Exit any old nodes.
			node.exit().remove();
		}

		function details(d) {
			var isView = d.doc.constructor == String;

			var doc = window.open(
				isView ? d.doc : "",
				"_blank",
				"left="+d.x+"px,"
				+ "top="+d.y+"px,"
				+ "width=50,height=50,location=0,menubar=0,status=0,titlebar=0,toolbar=0");

			if ( !isView )
				doc.document.write(JSON.stringify( d.doc ));

			//var g = d3.select(this); // the node

			/*var add = d3.select("body")
				.append("iframe")
				.attr("src", "/home.view")
				.attr("width",100)
				.attr("height",100);*/

			/*var div = d3.select("body")
					.append("div")
					.attr("pointer-events","none")
					.attr("class","tooltip")
					.style("opacity",1)
					.html("hello<br>there")
					.style("left", (d.x+50))
					.style("top", (d.y));*/
		}

		function bang() {
			alert("hello! ");
		}

		function tick() {
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });

			node.attr("cx", function(d) { return d.x; })
				.attr("cy", function(d) { return d.y; });
		}

		// Color leaf nodes orange, and packages white or blue.
		function color(d) {
			return d._children ? "#3182bd" : d[CHILDREN] ? "#c6dbef" : "#fd8d3c";
		}

		// Toggle children on click.
		function click(d) {
			if (d[CHILDREN]) {
				d._children = d[CHILDREN];
				d[CHILDREN] = null;
			} else {
				d[CHILDREN] = d._children;
				d._children = null;
			}

			if (d.doc) details(d);
			update();
		}

		// Returns a list of all nodes under the root.
		function flatten(root) {
			var nodes = [], i = 0;

			function recurse(node) {
				var size = 0;

				if (children = node[CHILDREN]) 
					children.forEach( node => size += children.reduce( function(weight, node) { 
						return weight + recurse(node); 
					}, 0) ); 

				if (!node.id) node.id = ++i;

				nodes.push(node);
				node[SIZE] = 2;
				return size;
			}

			root[SIZE] = recurse(root);
			return nodes;
		}

		var	
			width = opts.w || 1200,
			height = opts.h || 500,
			node,
			link,
			root;

		var force = d3.layout.force()
			.on("tick", tick)
			.charge(function(d) { return d._children ? -d[SIZE] / 100 : -30; })
			.linkDistance(function(d) { return d.target._children ? 80 : 30; })
			.size([width, height]);

		var 
			view = d3.select("body"),
			msg = "p".d3tag(view, {text: "details: "}),
			url = "#{url}".replace("/force",""),
			title = "p".d3tag(view,	{ html: [
						"treefan".tag( "/treefan"+url ),
						"treemap".tag( "/treemap"+url )
					].join(" || ")
				} ),
		
			vis = d3.select("#content").append("svg")
				.attr("width", width)
				.attr("height", height);

		BASE.Load( opts, recs => {
			root = recs[0] || {};
			console.log( root );
			root.fixed = true;
			root.x = width / 2;
			root.y = height / 2;
			update();
		} );

//- UNCLASSIFIED