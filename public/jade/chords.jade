//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display d3 chordal chart using parameters:

			src = source url returning trades [ { name: "x.y.z ...", size: N, doc: "", imports: [ "x.y.z ...", ... ]
			name = "name" || "name%..." || "" of source record(s)
			pivots = "key,key,..." || "" source record grouping keys
			w = drawing width
			h = drawing height
			debug = level of debugging alerts
			node,children,value,size,parent,doc = tree keys

append base_head
	style.
		.group text {
			font: 11px sans-serif;
			pointer-events: none;
		}
		.group path {
			stroke: #000;
		}
		path.chord {
			stroke-width: .75;
			fill-opacity: .75;
		}
		.group-tick line {
			stroke: #000;
		}
		.ribbons {
			fill-opacity: 0.67;
		}																						  
		body {
			font-family: 'Open Sans', sans-serif;
			font-size: 12px;
			font-weight: 400;
			background-color: #fff;
			width: 960px;
			height: 700px;
			margin-top: 10px;
		}
		svg {
			width: "100%";
			height: auto;
		}

	script.
		var opts = {
			ds: "#{query.pivots}"
				? "!{query.src}.tree?name=#{query.name}&_sort=#{query.pivots}"
				: "#{query.name}"
							? "!{query.src}.schema?name=#{query.name}"
							: "!{query.src}" || "/stores/trades.json",

			url: "#{url}",
			family: "chords,bundle",
																								 
			dims: {
				margin: {top: 20, right: 90, bottom: 30, left: 90},
				width: parseInt("#{query.w}") || 1200,
				height: parseInt("#{query.h}") || 500
			},
			debug: parseInt("#{query.debug}"),

			NODE: "#{query.node}" || "name",
			CHILDREN: "#{query.children}" || "children",
			VALUE: "#{query.value}" || "value",
			PARENT: "#{query.parent}" || "parent",
			SIZE: "#{query.size}" || "size",
			DOC: "#{query.doc}" || "doc"
		};

		const {NODE, CHILDREN, VALUE, SIZE, PARENT, DOC} = opts;
		const {isArray,isString,Fetch,Log} = BASE;

append base_body
	script.
		Fetch( opts, (data,svg) => {
			var
				width = svg.attr("width"),
				height = svg.attr("height"),

				outerRadius = Math.min(width, height) * 0.5,
				innerRadius = outerRadius - 124,
				color = d3.scaleOrdinal(d3.schemeCategory10),
				ribbon = d3.ribbon()
						.radius(innerRadius),
				arc = d3.arc()
						.innerRadius(innerRadius)
						.outerRadius(innerRadius + 20),
				chord = d3.chord()
						.padAngle(.04)
						.sortSubgroups(d3.descending)
						.sortChords(d3.descending);

			//Log(width,height, innerRadius, outerRadius);
			svg
					.attr("viewBox", [-width / 2, -height / 2, width, height])
					.attr("font-size", 10)
					.attr("font-family", "sans-serif");
					
			var 
				data = build(data),
				
				chords = chord(data.matrix),

				group = svg.append("g")
						.selectAll("g")
						.data(chords.groups)
						.join("g");

				group.append("path")
						.attr("fill", d => color(d.index))
						.attr("stroke", d => color(d.index))
						.attr("d", arc);

				group.append("text")
						.each(d => { d.angle = (d.startAngle + d.endAngle) / 2; })
						.attr("text-anchor", d => d.angle > Math.PI ? "end" : null)
						.text(d => data.indexMap.get(d.index))
						.attr("dy", ".35em")
						.attr("transform", transformer );

				svg.append("g")
						.attr("fill-opacity", 0.67)
						.selectAll("path")
						.data(chords)
						.join("path")
						.attr("stroke", d => d3.rgb(color(d.source.index)).darker())
						.attr("fill", d => color(d.source.index))
						.attr("d", ribbon);
											   
			function transformer(d) {
				return `
					rotate(${(d.angle * 180 / Math.PI - 90)})
					translate(${innerRadius + 26})
					${ d.angle > Math.PI ? "rotate(180)" : "" }
					`;
			}
		});

		function build( imports ) {
			const indexByName = new Map;
			const nameByIndex = new Map;
			const matrix = [];
			let n = 0;

			// Returns the Flare package name for the given class name.
			function name(name) {
				return name.substring(0, name.lastIndexOf(".")).substring(6);
			}

			// Compute a unique index for each package name.
			imports.forEach(d => {
				if (!indexByName.has(d = name(d.name))) {
					nameByIndex.set(n, d);
					indexByName.set(d, n++);
				}
			});

			// Construct a square matrix counting package imports.
			imports.forEach(d => {
				const source = indexByName.get(name(d.name));
				let row = matrix[source];
				if (!row) row = matrix[source] = Array.from({length: n}).fill(0);
				d.imports.forEach(d => row[indexByName.get(name(d))]++);
			});

			return {
				matrix: matrix,
				nameMap: indexByName,
				indexMap: nameByIndex
			};
		}

// UNCLASSIFIED