//- UNCLASSIFIED

extends base
append base_parms
	- tech = "d3"

append base_help
	:markdown
		Display circle packing chart:

			src = source url returning node tree { ID:Name, count:Value, data: [ Children ]}
			pivots = key,key,...
			w = drawing width
			h = drawing height
			debug = dump derived options
			x,y,r,s = position, radius and weight keys
			node,children,value,size,parent = key names

append base_head

	svg(width="960",height="960")

	style.
		.node {
			cursor: pointer;
		}

		.node:hover {
			stroke: #000;
			stroke-width: 1.5px;
		}

		.node--leaf {
			fill: white;
		}

		.label {
			font: 11px "Helvetica Neue", Helvetica, Arial, sans-serif;
			text-anchor: middle;
			text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;
		}

		.label,
		.node--root,
		.node--leaf {
			pointer-events: none;
		}

	script.
		var opts = {
			ds: 
				//"/store/flare.json", 
				"/!{query.src}.tree?ID=#{query.id}&_sort=#{query.pivots}",
			w: parseInt("#{query.w}") || 200,
			h: parseInt("#{query.h}") || 200,
			debug: parseInt("#{query.debug}"),
			x: "#{query.x}" || "x",
			y: "#{query.y}" || "y",
			r: "#{query.r}" || "r",
			s: "#{query.q}" || "weight",
			NODE: "#{query.node}" || "name",
			CHILDREN: "#{query.children}" || "children",
			VALUE: "#{query.value}" || "value",
			PARENT: "#{query.parent}" || "parent",
			SIZE: "#{query.size}" || "size"	
		};
										
		const {NODE, CHILDREN, VALUE, SIZE, PARENT} = opts;

append base_body

	script(src="/clients/d3/d3.v4.min.js")

	script.
		var
			w = opts.w || 1200,
			h = opts.h || 500;

		var 
			svg = d3.select("svg"),
			margin = 20,
			diameter = svg.attr("width"),
			g = svg.append("g").attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");

		var 
			color = d3.scaleLinear()
			.domain([-1, 5])
				.range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
				.interpolate(d3.interpolateHcl);

		var 
			pack = d3.pack()
				[SIZE]([diameter - margin, diameter - margin])
				.padding(2);

		BASE.Load( opts, root => {
			root = d3.hierarchy(root)
				.sum(function(d) { return d[SIZE]; })
				.sort(function(a, b) { return b[VALUE] - a[VALUE]; });

			var 
				focus = root,
				nodes = pack(root).descendants(),
				view;

			var 
				circle = g.selectAll("circle")
					.data(nodes)
					.enter().append("circle")
					.attr("class", function(d) { return d[PARENT] ? d[CHILDREN] ? "node" : "node node--leaf" : "node node--root"; })
					.style("fill", function(d) { return d[CHILDREN] ? color(d.depth) : null; })
					.on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

			var 
				text = g.selectAll("text")
					.data(nodes)
					.enter().append("text")
					.attr("class", "label")
					.style("fill-opacity", function(d) { return d[PARENT] === root ? 1 : 0; })
					.style("display", function(d) { return d[PARENT] === root ? "inline" : "none"; })
					.text(function(d) { return d[NODE]; });

			var 
				node = g.selectAll("circle,text");

			svg
				.style("background", color(-1))
				.on("click", function() { zoom(root); });

			zoomTo([root.x, root.y, root.r * 2 + margin]);

			function zoom(d) {
				var focus0 = focus; focus = d;

				var transition = d3.transition()
				.duration(d3.event.altKey ? 7500 : 750)
				.tween("zoom", function(d) {
					var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
					return function(t) { zoomTo(i(t)); };
				});

				transition.selectAll("text")
					.filter(function(d) { return d[PARENT] === focus || this.style.display === "inline"; })
					.style("fill-opacity", function(d) { return d[PARENT] === focus ? 1 : 0; })
					.on("start", function(d) { if (d[PARENT] === focus) this.style.display = "inline"; })
					.on("end", function(d) { if (d[PARENT] !== focus) this.style.display = "none"; });
			}

			function zoomTo(v) {
				var k = diameter / v[2]; view = v;
				node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
				circle.attr("r", function(d) { return d.r * k; });
			}
		});

// UNCLASSIFIED
