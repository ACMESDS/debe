Ext.data.JsonP.ATOMIC({"tagname":"class","name":"ATOMIC","autodetected":{},"files":[{"filename":"atomic.md","href":"atomic.md.html#ATOMIC"}],"members":[],"alternateClassNames":[],"aliases":{},"id":"class-ATOMIC","short_doc":"SourceForge\n    github\n    geointapps\n    gitlab\n\nATOMIC\n\nATOMIC implements hyperthreaded, cloud-based workflows to\ns...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/atomic.md.html#ATOMIC' target='_blank'>atomic.md</a></div></pre><div class='doc-contents'><p><a href=\"https://sourceforge.net\">SourceForge</a>\n    <a href=\"https://github.com/acmesds/atomic.git\">github</a>\n    <a href=\"https://git.geointapps.org/acmesds/atomic\">geointapps</a>\n    <a href=\"https://gitlab.west.nga.ic.gov/acmesds/atomic.git\">gitlab</a></p>\n\n<h1>ATOMIC</h1>\n\n<p>ATOMIC implements hyperthreaded, cloud-based workflows to\n<a href=\"/api.view\">stateless and stateful engines</a> of TYPE</p>\n\n<pre><code>py | js | sh | cv | ma | sh | r | octave\n</code></pre>\n\n<p>at ATOMIC[TYPE].  Engines are controlled via the following methods (restful http endpoints):</p>\n\n<pre><code>POST advance/setp/insert a stateful engine\nPUT compile/init/update a stateful engine\nDELETE deallocate/kill/delete a stateful engine\nGET execute/read/select a stateless engines\n</code></pre>\n\n<p>Stateful engines are supported by the step, init and kill methods, and are passed TAU event tokens:</p>\n\n<pre><code>TAU.i = [{tau}, ...] = events arriving to engine's input port\nTAU.o = [{tau}, ...] = events departing from engine's output port\nTAU.p = {port1: {...}, ... port2: {...}, ... sql: {...} }\nTAU.port = engine's in/out port to step\nTAU.thread = engine's 0-base thread counter\n</code></pre>\n\n<p>where input/output port parameters and engine code are taken from\nthe Vars and Code engine context at workflow initialization, and\nwhere sql is a mysql database connector.</p>\n\n<p>Each event token contains the following default fields (they can\nbe freely interpretted and extended by the engine):</p>\n\n<pre><code>job = \"\"    = Current job thread N.N...\nwork = 0    = Anticipated/delivered data volume (dims bits etc)\ndisem = \"\"  = Disemination channel for this event\nclassif = \"\"    = Classification of this event\ncost = \"\"   = Billing center\npolicy = \"\" = Data retention policy\nstatus = 0  = Status code\nvalue = 0   = Flow calculation\n</code></pre>\n\n<p>Stateless engines are supported by the read method, and are passed\nthe following parameters:</p>\n\n<pre><code>TAU.i = {tau} = input event sinked to an engine\nTAU.o = {tau} = output event sourced from an engine\nTAU.p = {sql: {...}, query: {...} }\n</code></pre>\n\n<p>where the query hash will contain the url parameters.</p>\n\n<p>In addition to geoClient config paramaters, geoEngine accepts\nthe config parameters:</p>\n\n<pre><code>jobspath path to prefix to a tau.job\napp{...} crud interface to virtual tables\n</code></pre>\n\n<h2>Installation</h2>\n\n<p>Clone from one of the repos.</p>\n\n<h2>Use</h2>\n\n<p>ATOMIC is configured and started like this:</p>\n\n<pre><code>var ATOMIC = require(\"atomic\").config({\n        key: value,                         // set key\n        \"key.key\": value,                   // indexed set\n        \"key.key.\": value,                  // indexed append\n        OBJECT: [ function (){}, ... ],     // add OBJECT prototypes \n        Function: function () {}            // add chained initializer callback\n        :\n        :\n    }, function (err) {\n    console.log( err ? \"something evil happended\" : \"Im running\");\n});\n</code></pre>\n\n<p>where its configuration keys follow the <a href=\"https://github.com/acmesds/enum\">ENUM copy()</a> conventions\ndescribed in its <a href=\"/shares/prm/engine/index.html\">PRM</a>.</p>\n\n<p>The examples below are provided in TOTEM's test.js unit tester.</p>\n\n<h3>E1 - Totem and Atomic Engine interfaces</h3>\n\n<pre><code>var ATOMIC = require(\"../atomic\");\nvar TOTEM = require(\"../totem\");\n\nTrace( \"A Totem+Engine client has been created\", {\n    a_tau_template: ATOMIC.tau(\"somejob.pdf\"),\n    engine_errors: ATOMIC.error,\n    get_endpts: TOTEM.reader,\n    my_paths: TOTEM.paths\n});\n</code></pre>\n\n<h3>E2 - Totem being powered up and down</h3>\n\n<pre><code>var TOTEM = require(\"../totem\");\n\nTOTEM.config({}, function (err) {\n    Trace( err || \"Started but I will now power down\" );\n    TOTEM.stop();\n});\n\nvar ATOMIC = require(\"../engine\").config({\n    thread: TOTEM.thread\n});\n</code></pre>\n\n<h3>E3 - Totem service with a chipper engine endpoint and a database</h3>\n\n<pre><code>var TOTEM = require(\"../totem\").config({\n    \"byType.\": {\n        chipper: function Chipper(req,res) {                \n            res( 123 );\n        }\n    },\n\n    mysql: {\n        host: ENV.MYSQL_HOST,\n        user: ENV.MYSQL_USER,\n        pass: ENV.MYSQL_PASS\n    }\n\n});\n\nvar ATOMIC = require(\"../engine\").config({\n    thread: TOTEM.thread\n});\n</code></pre>\n\n<h3>E4 - Totem with a complete engine test endpoint</h3>\n\n<pre><code>    var TOTEM = require(\"../totem\").config({\n        \"byType.\": {\n            test: function Chipper(req,res) {\n\n                var itau = [ATOMIC.tau()];\n                var otau = [ATOMIC.tau()];\n\n                switch (req.query.config) {\n                    case \"cv\": // program and step haar opencv machine \n                        parm =  {\n                            tau: [], \n                            ports: {\n                                frame:   {},\n                                helipads: {scale:0.05,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                                faces:   {scale:0.05,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                        }};\n\n                        itau[0].job = \"test.jpg\";\n                        console.log(parm);\n\n                        for (var n=0,N=1;n&lt;N;n++)  // program N&gt;1 to test reprogram\n                            console.log(`INIT[${n}] = `, ATOMIC.opencv(\"opencv.Me.Thread1\",\"setup\",parm));\n\n                        for (var n=0,N=5;n&lt;N;n++) // step N&gt;1 to test multistep\n                            console.log(`STEP[${n}] = `, ATOMIC.opencv(\"opencv.Me.Thread1\",\"frame\",itau));\n\n                        // returns badStep if the cascades were undefined at the program step\n                        console.log(\"STEP = \", ATOMIC.opencv(\"opencv.Me.Thread1\",\"helipads\",otau));\n                        console.log(otau);\n                        break;\n\n                    // python machines fail with \"cant find forkpty\" if \"import cv2\" attempted\n\n                    case \"py1\": // program python machine\n                        parm =  { \n                            tau:    [{job:\"redefine on run\"}],\n                            ports: {    \n                        }};\n                        pgm = `\n                            print 'Look mom - Im running python!'\n                            print tau\n                            tau = [{'x':[11,12],'y':[21,22]}]\n                            `;\n\n                        // By default python attempts to connect to mysql.  \n                        // So, if mysql service not running or mysql.connector module not found, this will not run.\n                        console.log({py:pgm, ctx: parm});\n                        console.log(\"INIT = \", ATOMIC.python(\"py1.thread\",pgm,parm));\n                        console.log(parm.tau);\n                        break;\n\n                    case \"py2\": // program and step python machine \n                        parm =  { \n                            tau:    [{job:\"redefine on run\"}],\n                            ports: {    \n                                frame:   {},\n                                helipads:{scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                                faces:   {scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                        }};\n\n                        itau[0].job = \"test.jpg\";\n                        pgm = `\n                            print 'Look mom - Im running python!'\n                            def frame(tau,parms):\n                                print parms\n                                return -101\n                            def helipads(tau,parms):\n                                print parms\n                                return -102\n                            def faces(tau,parms):\n                                print parms\n                                return -103\n                            `;      \n                        console.log({py:pgm, ctx: parm});\n                        console.log(\"INIT = \", ATOMIC.python(\"py2.Me.Thread1\",pgm,parm));\n                        // reprogramming ignored\n                        //console.log(\"INIT = \", ATOMIC.python(\"py2.Me.Thread1\",pgm,parm));\n\n                        for (var n=0,N=1; n&lt;N; n++)\n                            console.log(`STEP[${n}] = `, ATOMIC.python(\"py2.Me.Thread1\",\"frame\",itau));\n\n                        console.log(\"STEP = \", ATOMIC.python(\"py2.Me.Thread1\",\"helipads\",otau));\n                        break;\n\n                    case \"py3\": // program and step python machine string with reinit along the way\n                        parm =  { \n                            tau:    [{job:\"redefine on run\"}],\n                            ports: {    \n                                frame:   {},\n                                helipads:{scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                                faces:   {scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                        }};\n\n                        itau[0].job = \"test.jpg\";\n                        pgm = `\n                            print 'Look mom - Im running python!'\n                            def frame(tau,parms):\n                                print parms\n                                return -101\n                            def helipads(tau,parms):\n                                print parms\n                                return -102\n                            def faces(tau,parms):\n                                print parms\n                                return -103\n                            `;\n\n                        console.log({py:pgm, ctx: parm});\n                        console.log(\"INIT = \", ATOMIC.python(\"py3\",pgm,parm));\n                        console.log(\"STEP = \", ATOMIC.python(\"py3\",\"frame\",itau));\n                        // reprogramming ignored\n                        //console.log(\"REINIT = \", ATOMIC.python(\"py3\",pgm,parm));\n                        //console.log(\"STEP = \", ATOMIC.python(\"py3\",\"frame\",itau));\n                        console.log(otau);\n                        break;\n\n                    case \"js\": // program and step a js machine string\n                        parm =  { \n                            ports: {    \n                                frame:   {},\n                                helipads:{scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"c1/cascade\"]},\n                                faces:   {scale:1.01,dim:100,delta:0.1,hits:10,cascade:[\"haarcascade_frontalface_alt\",\"haarcascade_eye_tree_eyeglasses\"]}\n                        }};\n\n                        itau[0].job = \"test.jpg\";\n                        pgm = `\n                            CON.log('Look mom - Im running javascript!');\n                            function frame(tau,parms) { \n                                CON.log(\"here I come to save the day\");\n                                tau[0].xyz=123; \n                                return 0; \n                            }\n                            function helipads(tau,parms) { \n                                tau[0].results=666; \n                                return 101; \n                            }\n                            function faces(tau,parms) { return 102; }\n                            `;\n\n                        console.log({py:pgm, ctx: parm});\n                        console.log(\"INIT = \", ATOMIC.js(\"mytest\",pgm,parm));\n                        // frame should return a 0 = null noerror\n                        console.log(\"STEP = \", ATOMIC.js(\"mytest\",\"frame\",itau));\n                        console.log(itau);\n                        // helipads should return a 101 = badload error\n                        console.log(\"STEP = \", ATOMIC.js(\"mytest\",\"helipads\",otau));\n                        console.log(otau);\n                        break;  \n                }\n\n                res( \"thanks!\" );\n            }\n        },\n\n        mysql: {\n            host: ENV.MYSQL_HOST,\n            user: ENV.MYSQL_USER,\n            pass: ENV.MYSQL_PASS\n        }\n\n    }, function (err) {\n        Trace( \"Unit test my engines with /test?config=cv | py1 | py2 | py3 | js\" );\n    });\n\n    var ATOMIC = require(\"../atomic\").config({\n        thread: TOTEM.thread\n    });\n</code></pre>\n\n<h2>License</h2>\n\n<p><a href=\"LICENSE\">MIT</a></p>\n</div><div class='members'></div></div>","meta":{}});